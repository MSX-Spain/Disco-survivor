0001   0000                 output "main.bin"
0002   0000             
0003   0000 FE              db   0FEh               ; ID archivo binario, siempre hay que poner el mismo 0FEh
0004   0001 00 86           dw   INICIO             ; dirección de inicio
0005   0003 E6 98           dw   FINAL - 1          ; dirección final
0006   0005 00 86           dw   MAIN               ; dircción del programa de ejecución (para cuando pongas r en bload"nombre_programa", r)
0007   0007                 
0008   0007                  
0009   0007              
0010   0007                 org #8600             ; org se utiliza para decirle al z80 en que posición de memoria empieza nuestro programa (es la 33280 en decimal), en hezadecimal sería #8200
0011   8600                     
0012   8600             INICIO: 
0013   8600             
0014   8600             screen:  equ #8500
0015   8600             in_game:  equ #8501
0016   8600             lives:  equ #8502
0017   8600             score:  equ #8503
0018   8600             
0019   8600             
0020   8600             MAIN:    
0021   8600 3E 02           ld a,2 ; le ponemos la música ingame
0022   8602 32 04 85        ld (musica_activa),a
0023   8605 CD 32 8F        call inicilizar_tracker
0024   8608             
0025   8608                 ;-------------------------
0026   8608                 ;-------debug-------------
0027   8608                 ;ld a,2
0028   8608                 ;ld (screen),a
0029   8608                 ;-------Fin debug--------
0030   8608                 ;-------------------------
0031   8608 3E 01           ld a,1
0032   860A 32 01 85        ld (in_game),a;ponemos el valor de ingame a 1 para que no se salga a la siguiente pantalla
0033   860D             
0034   860D CD ED 89    	call create_player
0035   8610 CD 8C 8B    	call create_enemy
0036   8613 CD 58 86        call hud
0037   8616 CD E1 86        call load_screens ; cargamos las 5 pantallas
0038   8619 CD 44 00        call ENASCR; encendemos la pantalla
0039   861C CD 20 86    	call main_loop
0040   861F                 
0041   861F C9          	ret
0042   8620             
0043   8620             main_loop: 
0044   8620 76              halt
0045   8621              
0046   8621 CD 13 8A    	call update_player
0047   8624 CD 8D 8B        call update_enemies
0048   8627 CD 06 8A        call render_player
0049   862A CD 91 8D        call draw_enemies
0050   862D                 ;ld a, (in_game)
0051   862D                 ;cp 0
0052   862D                 ;jp z, .end_game
0053   862D 18 F1       	jr main_loop
0054   862F             .end_game: 
0055   862F                 ;call para_cancion
0056   862F C9              ret
0057   8630             
0058   8630             
0059   8630             kill_player
0060   8630 CD C0 00        call BEEP
0061   8633 C9              ret
0062   8634             
0063   8634             
0064   8634             
0065   8634             
0066   8634             
0067   8634             
0068   8634             
0069   8634             
0070   8634             ;;----------------------------------
0071   8634             ;;   GETBLOCK=Hace esta formula (y/8)*32+(x/8)
0072   8634             ;;      Input:
0073   8634             ;;          D=con la posición x
0074   8634             ;;          E=con la posición y
0075   8634             ;;      Output
0076   8634             ;;          B=el tile sobre el que está laentidad
0077   8634             get_block: 
0078   8634 7B              ld a,e
0079   8635                 ;ld a,(ix+player.y) ;a=posicion y en pixeles
0080   8635 C6 10           add 16
0081   8637                 ;con srl estas dividiendo entre 2,ya que corre a la derecha los bits. 
0082   8637                 ;al hacerlo 3 veces es como dividir entre 8,a=y/8: 1.01001100, 2.00100110, 3.00010011
0083   8637 CB 3F           srl a  
0084   8639 CB 3F           srl a  
0085   863B CB 3F           srl a  
0086   863D 26 00           ld h,0 ; en h le ponemos un 0 
0087   863F 6F              ld l,a ;y en los 8 bytes de "l" le ponemos el valor que contiene a
0088   8640             
0089   8640                 ;-----------------
0090   8640                 ;Buscando la fila
0091   8640 29              add hl, hl ;x32, sumar algo por si mismo es como multiplizarlo por 2, si lo repetivos 5 es como si o multiplixaramos por 32
0092   8641 29              add hl, hl 
0093   8642 29              add hl, hl 
0094   8643 29              add hl, hl 
0095   8644 29              add hl, hl 
0096   8645             
0097   8645                 ;-----------------
0098   8645                 ;Esta es la parte +(x/8)
0099   8645 7A              ld a,d
0100   8646                 ;ld a,(ix+player.x) ;a=x
0101   8646 C6 08           add 8
0102   8648 CB 3F           srl a 
0103   864A CB 3F           srl a 
0104   864C CB 3F           srl a 
0105   864E 16 00           ld d,0
0106   8650 5F              ld e,a ;e=x
0107   8651 19              add hl,de ;hl=(y/8)*32+(x/8)
0108   8652             
0109   8652 11 23 87        ld de, map_buffer; dirección buffer colisiones
0110   8655 19              add hl,de ;hl=buffer_colisiones + (y/8)*32+(x/8)
0111   8656             
0112   8656 46              ld b,(hl) ;metemos en a el tile que nos pide
0113   8657                 ;ld (tile0),a
0114   8657 C9              ret
0115   8658             
0116   8658             
0117   8658             
0118   8658             
0119   8658             hud: 
0120   8658                 ;------------------------Level--------------------------
0121   8658 3E 00           ld a,0
0122   865A 32 B7 FC        ld (GRPACX),a ;GRPACX contiene la posición X del cursor en modo gráfico
0123   865D 3E B8           ld a,184
0124   865F 32 B9 FC        ld (GRPACY),a
0125   8662 21 11 87        ld hl, message_level
0126   8665 CD A7 86        call graphics_print
0127   8668                 ;1 nos estudiamos donde está la dirección de la tabla de nombres en VRAM
0128   8668                 ;2.obtenemos el número de tile que keremos poner
0129   8668 3A 00 85        ld a,(screen)
0130   866B 06 56           ld b, COMIENZO_TILE_NUMEROS
0131   866D 80              add b
0132   866E 21 E5 1A        ld hl, 6885 ;aki va la dirección de la tabla de nombres que keremos cambiar;6912(final de la tabla de nombres)-32(-1 fila)=6880+7
0133   8671 CD 4D 00        call WRTVRM
0134   8674                ;---------------------Fin Level--------------------------
0135   8674             
0136   8674             
0137   8674                 ;------------------------Score--------------------------
0138   8674 3E 3A           ld a,58; posicionamos el cursor en la posición x 58
0139   8676 32 B7 FC        ld (GRPACX),a
0140   8679 21 1D 87        ld hl, message_score
0141   867C CD A7 86        call graphics_print
0142   867F 3E 64           ld a,100; posicionamos el cursor en la posición x 58
0143   8681 32 B7 FC        ld (GRPACX),a
0144   8684                 ;metemos en b el valor correspondiente al 0 en la tabla ascii
0145   8684 06 2F           ld b,47
0146   8686                 ;para sumar a y b tendremos que echar mano de ld a
0147   8686 3A 03 85        ld a,(score)
0148   8689 80              add b
0149   868A CD 8D 00        call GRPPRT 
0150   868D                 ;---------------------Fin score--------------------------
0151   868D             
0152   868D                 ;------------------------Lives--------------------------
0153   868D 3E 96           ld a,150
0154   868F 32 B7 FC        ld (GRPACX),a
0155   8692 21 17 87        ld hl, message_lives
0156   8695 CD A7 86        call graphics_print
0157   8698 3E C8           ld a,200
0158   869A 32 B7 FC        ld (GRPACX),a
0159   869D                 ;metemos en b el valor correspondiente al 0 en la tabla ascii
0160   869D 06 2F           ld b,47
0161   869F                 ;para sumar a y b tendremos que echar mano de ld a
0162   869F 3A 02 85        ld a,(lives)
0163   86A2 80              add b
0164   86A3 CD 8D 00        call GRPPRT 
0165   86A6                 ;----------------------Fin lives-------------------------
0166   86A6 C9              ret
0167   86A7             
0168   86A7             graphics_print: 
0169   86A7 7E              ld  a,(hl)          
0170   86A8 A7              and a               
0171   86A9 C8              ret z               
0172   86AA CD 8D 00        call GRPPRT         
0173   86AD 23              inc hl              
0174   86AE 18 F7           jr graphics_print      
0175   86B0             
0176   86B0             
0177   86B0             
0178   86B0             
0179   86B0             
0180   86B0             
0181   86B0             
0182   86B0             increase_screen: 
0183   86B0 CD E0 8D        call sacar_sprites_de_pantalla
0184   86B3 CD 46 8B        call recolocate_player 
0185   86B6 CD 41 00        call DISSCR ;Apagamos la pantalla
0186   86B9 3A 00 85        ld a,(screen)
0187   86BC C6 01           add 1
0188   86BE 32 00 85        ld (screen),a ; aumentamos en contador de pantallas
0189   86C1                 ;ld a,0
0190   86C1                 ;ld (in_game),a ; ponemos para que finalice la pantalla y carguemos con el basic la siguiente
0191   86C1 CD E1 86        call load_screens
0192   86C4 CD 58 86        call hud
0193   86C7 CD 44 00        call ENASCR
0194   86CA             
0195   86CA                 ;posicinamos los enemigos
0196   86CA 3A 00 85        ld a,(screen)
0197   86CD FE 02           cp 2
0198   86CF CA 0F 8E        jp z, recolocate_enemies_screen_2
0199   86D2 FE 03           cp 3
0200   86D4 CA 70 8E        jp z, recolocate_enemies_screen_3
0201   86D7 FE 04           cp 4
0202   86D9 CA D1 8E        jp z, recolocate_enemies_screen_4
0203   86DC FE 05           cp 5
0204   86DE 28 28           jr z, is_final_screen
0205   86E0             
0206   86E0 C9              ret
0207   86E1             load_screens: 
0208   86E1 21 01 C0        ld hl, MAPS_DIRECTION
0209   86E4 01 C0 02        ld bc, MAP_SIZE
0210   86E7 3A 00 85        ld a,(screen)
0211   86EA             .loop_load_screens: 
0212   86EA FE 01           cp 1
0213   86EC 28 05           jr z, .es_cero
0214   86EE D6 01           sub 1
0215   86F0 09              add hl, bc
0216   86F1 18 F7           jr .loop_load_screens
0217   86F3             .es_cero: 
0218   86F3 11 23 87        ld de, map_buffer 
0219   86F6 01 C0 02        ld bc, MAP_SIZE
0220   86F9 ED B0           LDIR
0221   86FB                 ;ponemos el mapa en la VRAM
0222   86FB 21 23 87        ld hl, map_buffer
0223   86FE 11 00 18        ld de, 6144 
0224   8701             	;Le quitamos 64 ya que keremos pintar el HUD en las últimas 2 líneas de la pantalla
0225   8701 01 C0 02        ld bc, MAP_SIZE
0226   8704 CD 5C 00        call  LDIRVM
0227   8707 C9              ret
0228   8708             is_final_screen: 
0229   8708 3E 01           ld a,1
0230   870A 32 00 85        ld (screen),a
0231   870D CD E1 86        call load_screens
0232   8710 C9              ret
0233   8711             
0234   8711             
0235   8711             
0236   8711             
0237   8711             message_level:  db "Level",0
0237   8711 4C6576656C00
0238   8717             message_lives:  db "Lives",0
0238   8717 4C6976657300
0239   871D             message_score:  db "Score",0
0239   871D 53636F726500
0240   8723             
0241   8723 00          map_buffer:  ds 704 ;768-64 es el mapa o tabla de nombres de VRAM copiada aquí
0242   89E3             MAPS_DIRECTION:  equ #c001
0243   89E3             MAP_SIZE:  equ 704 ;son 22 líneas de 32 bytes cada línea
0244   89E3 00          Store_Sprite_Collision:  db 0
0245   89E4             COMIENZO_TILE_NUMEROS:  equ 86
0246   89E4 00          buffer_numeros:  ds 8
0247   89EC             TILE_DOOR:  equ 55
0248   89EC             TILE_SOLID:  equ 32
0249   89EC             
0250   89EC             UP:  equ 1
0251   89EC             DOWN:  equ 5
0252   89EC             LEFT:  equ 7
0253   89EC             RIGHT:  equ 3 
0254   89EC             
0255   89EC             COLOR_TRASPARENTE:  equ 0
0256   89EC             COLOR_NEGRO:  equ 1
0257   89EC             COLOR_VERDE_MEDIO:  equ 2
0258   89EC             COLOR_VERDE_CLARO:  equ 3
0259   89EC             COLOR_AZUL_OSCURO:  equ 4
0260   89EC             COLOR_AZUL_MEDIO:  equ 5
0261   89EC             COLOR_ROJO_OSCURO:  equ 6
0262   89EC             COLOR_AZUL_CLARO: equ 7
0263   89EC             COLOR_ROJO_MEDIO:  equ 8
0264   89EC             COLOR_ROSA:  equ 9
0265   89EC             COLOR_AMARILLO:  equ 10
0266   89EC             COLOR_AMBAR:  equ 11
0267   89EC             COLOR_VERDE_OSCURO:  equ 12
0268   89EC             COLOR_LILA:  equ 13
0269   89EC             COLOR_GRIS:  equ 14
0270   89EC             COLOR_BLANCO:  equ 15
0271   89EC             
0272   89EC             
0273   89EC                 
0274   89EC             	include "src/vars_msxBios.asm"    
0001+  89EC             ;ver las instruciones del z80: http://clrhome.org/table/
0002+  89EC             ;ver las instrucciones de la bios: https://map.grauw.nl/resources/msxbios.php
0003+  89EC             ;ver las instrucciones: https://www.msx.org/wiki/Z80_Assembler_for_Dummies
0004+  89EC             
0005+  89EC             ; use RST assembler mnemonic to call
0006+  89EC             CHKRAM equ 0x00 ; RST 0x00 > Check RAM and sets slot for command area.
0007+  89EC             SYNCHR equ 0x08 ; RST	0x08 > Checks if then current character pointed by HL is one desired.
0008+  89EC             CHRGTR equ 0x10 ; RST	0x10 > Gets the next character (or token) of the Basic-text
0009+  89EC             OUTDO  equ 0x18 ; RST	0x18 > Output to current outputchannel (printer, diskfile, etc.)
0010+  89EC             DCOMPR equ 0x20 ; RST	0x20 > Compares HL with DE
0011+  89EC             GETYPR equ 0x28 ; RST	0x28 > Returns Type of DAC
0012+  89EC             CALLF  equ 0x30 ; RST	0x30 > Executes an interslot call
0013+  89EC             KEYINT equ 0x38 ; RST	0x38 > Executes the timer interrupt process routine
0014+  89EC             
0015+  89EC             ; use CALL assembler mnemonic
0016+  89EC             RDSLT  equ 0x000C ; Reads the value of an address in another slot
0017+  89EC             WRSLT  equ 0x0014 ; Writes a value to an address in another slot
0018+  89EC             CALSLT equ 0x001C ; Executes inter-slot call
0019+  89EC             ENASLT equ 0x0024 ; Switches indicated slot at indicated page on perpetual
0020+  89EC             
0021+  89EC             ; Initialization-routines
0022+  89EC             INITIO equ 0x003B ; Initialises the device
0023+  89EC             INIFNK equ 0x003E ; Initialises the contents of the function keys
0024+  89EC             
0025+  89EC             ; VDP routines
0026+  89EC             DISSCR equ 0x0041 ; inhibits the screen display
0027+  89EC             ENASCR equ 0x0044 ; displays the screen
0028+  89EC             WRTVDP equ 0x0047 ; write data in the VDP-register, B  - Data to write, C  - Number of the register
0029+  89EC             RDVRM  equ 0x004A ; Reads the content of VRAM
0030+  89EC             WRTVRM equ 0x004D ; Writes data in VRAM
0031+  89EC             SETRD  equ 0x0050 ; Enable VDP to read
0032+  89EC             SETWRT equ 0x0053 ; Enable VDP to write
0033+  89EC             FILVRM equ 0x0056 ; fill VRAM with value
0034+  89EC             LDIRMV equ 0x0059 ; Block transfer to memory from VRAM
0035+  89EC             LDIRVM equ 0x005C ; Block transfer to VRAM from memory
0036+  89EC             CHGMOD equ 0x005F ; Switches to given screenmode
0037+  89EC             CHGCLR equ 0x0062 ; Changes the screencolors
0038+  89EC             CLRSPR equ 0x0069 ; Initialises all sprites
0039+  89EC             INITXT equ 0x006C ; Switches to SCREEN 0 (text screen with 40 * 24 characters)
0040+  89EC             INIT32 equ 0x006F ; Switches to SCREEN 1 (text screen with 32*24 characters)
0041+  89EC             INIGRP equ 0x0072 ; Switches to SCREEN 2 (high resolution screen with 256*192 pixels)
0042+  89EC             INIMLT equ 0x0075 ; Switches to SCREEN 3 (multi-color screen 64*48 pixels)
0043+  89EC             SETTXT equ 0x0078 ; Switches to VDP in SCREEN 0 mode
0044+  89EC             SETT32 equ 0x007B ; Switches VDP in SCREEN mode 1
0045+  89EC             SETGRP equ 0x007E ; Switches VDP to SCREEN 2 mode
0046+  89EC             SETMLT equ 0x0081 ; Switches VDP to SCREEN 3 mode
0047+  89EC             CALPAT equ 0x0084 ; Returns the address of the sprite pattern table
0048+  89EC             CALATR equ 0x0087 ; Returns the address of the sprite attribute table
0049+  89EC             GSPSIZ equ 0x008A ; Returns current sprite size
0050+  89EC             GRPPRT equ 0x008D ; Displays a character on the graphic screen
0051+  89EC             
0052+  89EC                     
0053+  89EC             ; PSG routines
0054+  89EC             GICINI equ 0x0090 ; Initialises PSG and sets initial value for the PLAY statement
0055+  89EC             WRTPSG equ 0x0093 ; Writes data to PSG-register
0056+  89EC             ;Input    : A  - PSG register number
0057+  89EC             ;           E  - Data write
0058+  89EC             RDPSG  equ 0x0096 ; Reads value from PSG-register
0059+  89EC             STRTMS equ 0x0099 ; Tests whether the PLAY statement is being executed as a background task. If not, begins to execute the PLAY statement  */
0060+  89EC             
0061+  89EC             ; Console routines, rutinas de consola
0062+  89EC             CHSNS  equ 0x009C ; Tests the status of the keyboard buffer
0063+  89EC             CHGET  equ 0x009F ; One character input (waiting)
0064+  89EC             CHPUT  equ 0x00A2 ; Displays one character
0065+  89EC             LPTOUT equ 0x00A5 ; Sends one character to printer
0066+  89EC             LPTSTT equ 0x00A8 ; Tests printer status
0067+  89EC             CNVCHR equ 0x00AB ; tests for the graphic header and transforms the code
0068+  89EC             PINLIN equ 0x00AE ; Stores in the specified buffer the character codes input until the return key or STOP key is pressed     */
0069+  89EC             INLIN  equ 0x00B1 ; Same as PINLIN except that AUGFLG (#F6AA) is set
0070+  89EC             QINLIN equ 0x00B4 ; Prints a questionmark andone space
0071+  89EC             BREAKX equ 0x00B7 ; Tests status of CTRL-STOP 
0072+  89EC             ISCNTC equ 0x00BA ; Tests status of SHIFT-STOP 
0073+  89EC             CKCNTC equ 0x00BD ; Same as ISCNTC. used in Basic
0074+  89EC             BEEP   equ 0x00C0 ; generates beep
0075+  89EC             BCLS   equ 0x00C3 ; Clears the screen
0076+  89EC             POSIT  equ 0x00C6 ; Places the cursor at the specified location
0077+  89EC             FNKSB  equ 0x00C9 ; Tests whether the function key display is active (FNKFLG)If so, displays them, otherwise erase them */
0078+  89EC             ERAFNK equ 0x00CC ; Erase functionkey display
0079+  89EC             DSPFNK equ 0x00CF ; Displays the function keys
0080+  89EC             TOTEXT equ 0x00D2 ; Forces the screen to be in the text mode
0081+  89EC             
0082+  89EC             ; Controller routines                      
0083+  89EC             GTSTCK equ 0x00D5 ; Returns the joystick status
0084+  89EC             GTTRIG equ 0x00D8 ; Returns current trigger status
0085+  89EC             GTPAD  equ 0x00DB ; Returns current touch pad status
0086+  89EC             GTPDL  equ 0x00DE ; Returns currenct value of paddle
0087+  89EC             
0088+  89EC             ; Tape device routines                      
0089+  89EC             TAPION equ 0x00E1 ; Reads the header block after turning the cassette motor on
0090+  89EC             TAPIN  equ 0x00E4 ; Read data from the tape
0091+  89EC             TAPIOF equ 0x00E7 ; Stops reading from the tape
0092+  89EC             TAPOON equ 0x00EA ; Turns on the cassette motor and writes the header
0093+  89EC             TAPOUT equ 0x00ED ; Writes data on the tape
0094+  89EC             TAPOOF equ 0x00F0 ; Stops writing on the tape
0095+  89EC             STMOTR equ 0x00F3 ; Sets the cassette motor action
0096+  89EC             
0097+  89EC             ; Queue routines                      
0098+  89EC             LFTQ equ 0x00F6 ; Gives number of bytes in queue
0099+  89EC             PUTQ equ 0x00F9 ; Put byte in queue
0100+  89EC             
0101+  89EC             ; Graphic routines
0102+  89EC             ;More info (MSX Assembly Page): http:;map.grauw.nl/resources/msxbios.php                      
0103+  89EC             RIGHTC equ 0x00FC ; Shifts screenpixel to the right
0104+  89EC             LEFTC  equ 0x00FF ; Shifts screenpixel to the left
0105+  89EC             UPC    equ 0x0102 ; Shifts screenpixel up
0106+  89EC             TUPC   equ 0x0105 ; Tests whether UPC is possible, if possible, execute UPC
0107+  89EC             DOWNC  equ 0x0108 ; Shifts screenpixel down
0108+  89EC             TDOWNC equ 0x010B ; Tests whether DOWNC is possible, if possible, execute DOWNC
0109+  89EC             SCALXY equ 0x010E ; Scales X and Y coordinates
0110+  89EC             MAPXY  equ 0x0111 ; Places cursor at current cursor address
0111+  89EC             FETCHC equ 0x0114 ; Gets current cursor addresses mask pattern
0112+  89EC             STOREC equ 0x0117 ; Record current cursor addresses mask pattern
0113+  89EC             SETATR equ 0x011A ; Set attribute byte
0114+  89EC             READC  equ 0x011E ; Reads attribute byte of current screenpixel
0115+  89EC             SETC   equ 0x0120 ; Returns currenct screenpixel of specificed attribute byte
0116+  89EC             NSETCX equ 0x0123 ; Set horizontal screenpixels
0117+  89EC             GTASPC equ 0x0126 ; Gets screen relations
0118+  89EC             PNTINI equ 0x0129 ; Initalises the PAINT instruction
0119+  89EC             SCANR  equ 0x012C ; Scans screenpixels to the right
0120+  89EC             SCANL  equ 0x012F ; Scans screenpixels to the left
0121+  89EC             
0122+  89EC             ; Graphic routines MSX2
0123+  89EC             ;More info (MSX Assembly Page): http:;map.grauw.nl/resources/msxbios.php#msx2bios
0124+  89EC             CHKNEW equ 0x0165 ;Tests screen mode > C-flag set if screenmode = 5, 6, 7 or 8
0125+  89EC             BIGFIL equ 0x016B ;fill VRAM with value (total VRAM can be reached) HL address, BC length, A data
0126+  89EC             NSETRD equ 0x016E ;Enable VDP to read.(with full 16 bits VRAM-address)
0127+  89EC             NSTWRT equ 0x0171 ;Enable VDP to write.(with full 16 bits VRAM-address) 
0128+  89EC             NRDVRM equ 0x0174 ;Reads VRAM like in RDVRM.(with full 16 bits VRAM-address)
0129+  89EC             NWRVRM equ 0x0177 ;Writes to VRAM like in WRTVRM.(with full 16 bits VRAM-address)
0130+  89EC             
0131+  89EC             
0132+  89EC             
0133+  89EC             
0134+  89EC             
0135+  89EC             
0136+  89EC                                  
0137+  89EC             ; Misc routines
0138+  89EC             CLIKSW equ 0xF3DB; para que no se oiga el click que hace al pulsar las teclas
0139+  89EC             CHGCAP equ 0x0132 ; Alternates the CAP lamp status
0140+  89EC             CHGSND equ 0x0135 ; Alternates the 1-bit sound port status
0141+  89EC             RSLREG equ 0x0138 ; Reads the primary slot register
0142+  89EC             WSLREG equ 0x013B ; Writes value to the primary slot register
0143+  89EC             RDVDP  equ 0x013E ; Reads VDP status register
0144+  89EC             SNSMAT equ 0x0141 ; Returns the value of the specified line from the keyboard matrix
0145+  89EC             ; 0   1          2           3           4           5           6           7           8       9       10
0146+  89EC             ;0    1          2                      4           5           6
0147+  89EC             ;1   ; fin grabr ' grabar                                                    Ñ
0148+  89EC             ;2                                      \grabar2  DEADfingrabar2 A           B
0149+  89EC             ;3 C                        F           G           H
0150+  89EC             ;4                          N
0151+  89EC             ;5 S                        V                       X                       Z
0152+  89EC             ;6SHIFtONTROL    GRAPH      CAPS        CODE
0153+  89EC             ;7              ESCAPE                              BS                      RET
0154+  89EC             ;8                                               Cursor ^    Cursor v
0155+  89EC             PHYDIO equ 0x0144 ; Executes I/O for mass-storage media like diskettes
0156+  89EC             FORMAT equ 0x0147 ; Initialises mass-storage media like formatting of diskettes
0157+  89EC             ISFLIO equ 0x014A ; Tests if I/O to device is taking place
0158+  89EC             OUTDLP equ 0x014E ; Printer output
0159+  89EC             GETVCP equ 0x0150 ; Returns pointer to play queue
0160+  89EC             GETVC2 equ 0x0153 ; Returns pointer to variable in queue number VOICEN (byte op #FB38)
0161+  89EC             KILBUF equ 0x0156 ; Clear keyboard buffer
0162+  89EC             CALBAS equ 0x0159 ; Executes inter-slot call to the routine in BASIC interpreter
0163+  89EC             
0164+  89EC             
0165+  89EC             
0166+  89EC                     
0167+  89EC             
0275   89EC             	include "src/vars_msxSystem.asm"    
0001+  89EC             ;ver las instrucciones del z80
0002+  89EC             ;ver las instruciones del z80: http://clrhome.org/table/
0003+  89EC             ;variables del sistema
0004+  89EC             ;https://www.msx.org/wiki/System_variables_and_work_area
0005+  89EC             
0006+  89EC             
0007+  89EC             
0008+  89EC             ;Slots
0009+  89EC             ;---------
0010+  89EC             
0011+  89EC             ;SLOTs
0012+  89EC             SLOT0 equ #FCC1
0013+  89EC             SLOT1 equ #FCC2
0014+  89EC             SLOT2 equ #FCC3
0015+  89EC             SLOT3 equ #FCC4
0016+  89EC             
0017+  89EC             ;Interruptions
0018+  89EC             ;-------------------
0019+  89EC             ;Contiene el valor del reloj del software, cada interrupción del VDP se incrementa en 1
0020+  89EC             ;El contenido se puede leer o cambiar mediante la función 'TIME' o la instrucción 'TIME'
0021+  89EC             JIFFY  equ 0xFC9E
0022+  89EC             
0023+  89EC             ;Graphics
0024+  89EC             ;-------------------
0025+  89EC             gxpos equ 0xfcb3
0026+  89EC             gypos equ 0xfcb5
0027+  89EC             bios_line equ 0x58C1
0028+  89EC             
0029+  89EC             
0030+  89EC             ;VDP registers
0031+  89EC             ;------------------- 
0032+  89EC             RG0SAV equ 0xF3DF   ;System saves here the byte written to the register R#00, Used by VDP(0)
0033+  89EC             RG1SAV equ 0xF3E0   ;System saves here the byte written to the register R#01, Used by VDP(1)
0034+  89EC             RG2SAV equ 0xF3E1   ;System saves here the byte written to the register R#02, Used by VDP(2)
0035+  89EC             RG3SAV equ 0xF3E2   ;System saves here the byte written to the register R#03, Used by VDP(3)
0036+  89EC             RG4SAV equ 0xF3E3   ;System saves here the byte written to the register R#04, Used by VDP(4)
0037+  89EC             RG5SAV equ 0xF3E4   ;System saves here the byte written to the register R#05, Used by VDP(5)
0038+  89EC             RG6SAV equ 0xF3E5   ;System saves here the byte written to the register R#06, Used by VDP(6)
0039+  89EC             RG7SAV equ 0xF3E6   ;System saves here the byte written to the register R#07.at start, Used by VDP(7)
0040+  89EC             STATFL equ 0xF3E7   ;System saves here the byte read from the status register R#00, Used by VDP(0)
0041+  89EC             
0042+  89EC             ;Screen Parameters
0043+  89EC             FORCLR equ 0xF3E9     ;Foreground colour
0044+  89EC             BAKCLR equ 0xF3EA     ;Background colour
0045+  89EC             BDRCLR equ 0xF3EB     ;Border colour
0046+  89EC             LINL40 equ 0xF3AE     ;Screen width per line in SCREEN 0 (Default 39)
0047+  89EC             LINL32 equ 0xF3AF     ;Screen width per line in SCREEN 1 (Default 29)
0048+  89EC             LINLEN equ 0xF3B0     ;Current screen width per line
0049+  89EC             CRTCNT equ 0xF3B1     ;Number of lines of current screen (default 24)
0050+  89EC             CLMLST equ 0xF3B2     ;X-location in the case that items are divided by commas in PRINT. (LINLEN-(LINLEN MOD 14)-14)
0051+  89EC             TXTNAM equ 0xF3B3     ;SCREEN 0 pattern name tabte address
0052+  89EC             TXTCOL equ 0xF3B5     ;SCREEN 0 color table address
0053+  89EC             TXTCGP equ 0xF3B7     ;SCREEN 0 Pattern generator table address
0054+  89EC             TXTATR equ 0xF3B9     ;Unused
0055+  89EC             TXTPAT equ 0xF3BB     ;Unused
0056+  89EC             T32NAM equ 0xF3BD     ;SCREEN 1 pattern name table address
0057+  89EC             T32COL equ 0xF3BF     ;SCREEN 1 color table address
0058+  89EC             T32CGP equ 0xF3C1     ;SCREEN 1 pattern ganarator table address
0059+  89EC             T32ATR equ 0xF3C3     ;SCREEN 1 sprite attribute table address
0060+  89EC             T32PAT equ 0xF3C5     ;SCREEN 1 sprite generator table address
0061+  89EC             GRPNAM equ 0xF3C7     ;SCREEN 2 pattern name table address
0062+  89EC             GRPCOL equ 0xF3C9     ;SCREEN 2 color table address
0063+  89EC             GRPCGP equ 0xF3CB     ;SCREEN 2 pattern generator table address
0064+  89EC             GRPATR equ 0xF3CD     ;SCREEN 2 sprite attribute table address
0065+  89EC             GRPPAT equ 0xF3CF     ;SCREEN 2 sprite generator table address
0066+  89EC             MLTNAM equ 0xF3D1     ;SCREEN 3 pattern name tabte address
0067+  89EC             MLTCOL equ 0xF3D3     ;SCREEN 3 color table address
0068+  89EC             MLTCGP equ 0xF3D5     ;SCREEN 3 pattern generator table address
0069+  89EC             MLTATR equ 0xF3D7     ;SCREEN 3 sprite attribute table address
0070+  89EC             MLTPAT equ 0xF3D9     ;SCREEN 3 sprite generator table address
0071+  89EC             TRCFLG equ 0xF7C4     ;Tracing flag. 0 = No tracing; Other = Tracing in progress
0072+  89EC             CGPNT  equ 0xF91F     ;Location of the character font used to initialise screen 
0073+  89EC                                   ;CGPNT = Slot ID
0074+  89EC                                   ;CGPNT+1 = Address
0075+  89EC             NAMBAS	equ 0xF922    ;Current pattern name table address
0076+  89EC             CGPBAS	equ 0xF924    ;Current pattern generator table address
0077+  89EC             PATBAS	equ 0xF926    ;Current sprite generator table address
0078+  89EC             ATRBAS	equ 0xF928    ;Current sprite attribute table address
0079+  89EC             CLOC	equ 0xF92A    ;Graphic cursor location
0080+  89EC             CMASK	equ 0xF92C    ;Graphic cursor mask (SCREEN 2 to 4) or ordinate (SCREEN 5 to 12)
0081+  89EC             DPPAGE	equ 0xFAF5    ;Displayed page number. (MSX2~)Modified by SETPAGE X
0082+  89EC             ACPAGE	equ 0xFAF6    ;Destination page number. (MSX2~)Modified by SETPAGE ,X
0083+  89EC             MODE	equ 0xFAFC    ;Flag for screen mode
0084+  89EC                                 ;bit 7: 1 = conversion to Katakana; 0 = conversion to Hiragana. (MSX2+~)
0085+  89EC                                 ;bit 6: 1 if Kanji ROM level 2. (MSX2+~)
0086+  89EC                                 ;bit 5: 0/1 to draw in RGB / YJK mode SCREEN 10 or 11. (MSX2+~)
0087+  89EC                                 ;bit 4: 0/1 to limit the Y coordinate to 211/255. (MSX2+~)
0088+  89EC                                 ;bit 3: 1 to apply the mask in SCREEN 0~3
0089+  89EC                                 ;bits 1-2: VRAM size
0090+  89EC                                 ;	   00 for 16kB
0091+  89EC                                 ;	   01 for 64kB
0092+  89EC                                 ;	   10 for 128kB
0093+  89EC                                 ;	   11 for 192kB
0094+  89EC                                 ;bit 0: 1 if the conversion of Romaji to Kana is possible. (MSX2~)
0095+  89EC             LINWRK	equ 0xFC18    ;40	Work area for screen management
0096+  89EC             PATWRK	equ 0xFC40    ;8	Returned character pattern by the routine GETPAT
0097+  89EC             GRPHED	equ 0xFCA6    ;1	Heading for the output of graphic characters
0098+  89EC             SCRMOD	equ 0xFCAF    ;1	Screen mode
0099+  89EC             OLDSCR	equ 0xFCB0    ;1	Old screen mode
0100+  89EC             NORUSE	equ 0xFAFD    ;1	Used by KANJI-ROM for rendering KANJI fonts in graphic modes. (MSX2~)
0101+  89EC                                 ;bit 7 Don't return to textmode
0102+  89EC                                 ;bit 6 if 1 and F7F4h (DECCNT)=0, read SHIFT status ???
0103+  89EC                                 ;bit 5 Disable some functinality
0104+  89EC                                 ;bit 4 Not in use	
0105+  89EC                                 ;bit 3 color 0 = Transparent
0106+  89EC                                 ;bit 0-2: Logical operation on kanji font draw
0107+  89EC                                 ;	  0 for PSET
0108+  89EC                                 ;	  1 for AND
0109+  89EC                                 ;	  2 for OR
0110+  89EC                                 ;	  3 for XOR
0111+  89EC                                 ;	  4 for NOT
0112+  89EC             LOGOPR  equ 0xFB02        ;1	Logical operation code. (MSX2~)
0113+  89EC             GXPOS	equ 0xFCB3        ;2	X-position of graphic cursor
0114+  89EC             GYPOS	equ 0xFCB5        ;2	Y-position of graphic cursor
0115+  89EC             GRPACX  equ 0xFCB7        ;2	X Graphics Accumulator, posicionar cursor en modo gráfico    
0116+  89EC             GRPACY  equ 0xFCB9        ;2	Y Graphics Accumulator, posicionar cursor en modo gráfico    
0117+  89EC             
0276   89EC             
0277   89EC             	include "src/MSXBasic/player.asm"    
0001+  89EC             ;player_atributes: ds 4,0
0002+  89EC             player_atributes: 
0003+  89EC                 struct player 
0004+  89EC~            y           db    0
0005+  89EC~            x           db    0
0006+  89EC~            pattern_def db    0; el player tendrá el patrón 0, el player 2*4=8, el enemy 1 el 3*12=12, estos patrones deben de coincidi con los dibujos de sprites que hemos dibujado
0007+  89EC~            color       db    0
0008+  89EC~            direction   db    0
0009+  89EC~            collision   db    0
0010+  89EC                 ends
0011+  89EC 00          tile0:  db 0
0012+  89ED             
0013+  89ED             
0014+  89ED             create_player: 
0015+  89ED DD 21 EC 89     ld ix, player_atributes
0016+  89F1 3E 96           ld a,150
0017+  89F3 DD 77 00        ld (ix+player.y),a ;le ponemos a la posición y un 160
0018+  89F6 3E 08           ld a,8
0019+  89F8 DD 77 01        ld (ix+player.x),a ;le ponemos a la posición x 120
0020+  89FB 3E 00           ld a,0
0021+  89FD DD 77 02        ld (ix+player.pattern_def),a ;Le ponemos el patrón 0
0022+  8A00 3E 0B           ld a,11 ; el 11 es el color amarillo
0023+  8A02 DD 77 03        ld (ix+player.color),a 
0024+  8A05 C9              ret
0025+  8A06             render_player: 
0026+  8A06 21 EC 89        ld hl, player_atributes 
0027+  8A09 11 00 1B        ld de, 6912 ;#1b00 dirección tabla de atributos en VRAM    
0028+  8A0C 01 04 00        ld bc, 4; 4 bytes para copiar
0029+  8A0F CD 5C 00        call  LDIRVM 
0030+  8A12 C9              ret
0031+  8A13             update_player: 
0032+  8A13 AF              xor a
0033+  8A14 CD D5 00        call GTSTCK
0034+  8A17                 ;call Readjoystick
0035+  8A17 FE 01           cp 1
0036+  8A19 CA 94 8A        jp z, move_player_up
0037+  8A1C                 ;cp 2
0038+  8A1C                 ;jp z, move_player_up_right
0039+  8A1C FE 03           cp 3
0040+  8A1E CA 2C 8A        jp z, move_player_right
0041+  8A21                 ;cp 4
0042+  8A21                 ;jp z, move_player_down_right
0043+  8A21 FE 05           cp 5
0044+  8A23 CA C8 8A        jp z, move_player_down
0045+  8A26                 ;cp 6
0046+  8A26                 ;jp z, move_player_down_left
0047+  8A26 FE 07           cp 7
0048+  8A28 CA 60 8A        jp z, move_player_left
0049+  8A2B                 ;cp 8
0050+  8A2B                 ;jp z, move_player_up_left
0051+  8A2B             .update_player_end: 
0052+  8A2B C9              ret
0053+  8A2C             
0054+  8A2C             
0055+  8A2C             move_player_right: 
0056+  8A2C                 ;Le metemos la dirección al player
0057+  8A2C 3E 03           ld a,RIGHT
0058+  8A2E DD 77 04        ld (ix+player.direction),a
0059+  8A31             
0060+  8A31                 ;comprobamos los límites de la pantalla
0061+  8A31 DD 7E 01        ld a,(ix+player.x)
0062+  8A34 FE F0           cp 240
0063+  8A36 28 1C           jr z,.move_player_right_end
0064+  8A38             
0065+  8A38                 ;Comprobamos las colisones
0066+  8A38 CD FC 8A        call check_collision_player
0067+  8A3B DD 7E 05        ld a,(ix+player.collision)
0068+  8A3E FE 01           cp 1
0069+  8A40 28 12           jr z, .move_player_right_end; si hay colisón saltamos la parte siguiente  hacemos que vaya al final
0070+  8A42             
0071+  8A42 DD 7E 01        ld a,(ix+player.x); obtenemos el valor actual de la posicion x
0072+  8A45 C6 01           add 1; incrementamos en 1 el valor
0073+  8A47 DD 77 01        ld (ix+player.x), a ; se lo metemos al atributo posicion X
0074+  8A4A E6 01           and 1
0075+  8A4C CA 5A 8A        jp z, right_es_impar
0076+  8A4F 3E 00           ld a, 0
0077+  8A51 DD 77 02        ld (ix+player.pattern_def),a ;le metemos el sprite que mira hacia la derecha 2
0078+  8A54             .move_player_right_end: 
0079+  8A54 3E 00           ld a,0
0080+  8A56 DD 77 05        ld (ix+player.collision),a
0081+  8A59 C9              ret
0082+  8A5A             right_es_impar: 
0083+  8A5A 3E 04           ld a, 1*4
0084+  8A5C DD 77 02        ld (ix+player.pattern_def),a ;le metemos el sprite que mira hacia la derecha 2
0085+  8A5F             
0086+  8A5F C9              ret
0087+  8A60             move_player_left: 
0088+  8A60                 ;le ponemos la dirección
0089+  8A60 3E 07           ld a,LEFT
0090+  8A62 DD 77 04        ld (ix+player.direction),a
0091+  8A65             
0092+  8A65                 ;comprobamos los límites de la pantalla
0093+  8A65 DD 7E 01        ld a,(ix+player.x)
0094+  8A68 FE 00           cp 0
0095+  8A6A 28 1C           jr z,.move_player_left_end
0096+  8A6C             
0097+  8A6C                 ;comprobamos las colisiones
0098+  8A6C CD FC 8A        call check_collision_player
0099+  8A6F                 ;su hubo uno colisión saltamos y vamos a la parte final
0100+  8A6F DD 7E 05        ld a,(ix+player.collision)
0101+  8A72 FE 01           cp 1
0102+  8A74 28 12           jr z, .move_player_left_end
0103+  8A76 DD 7E 01        ld a,(ix+player.x)
0104+  8A79 D6 01           sub 1  
0105+  8A7B DD 77 01        ld (ix+player.x), a 
0106+  8A7E E6 01           and 1
0107+  8A80 CA 8E 8A        jp z, left_es_impar
0108+  8A83 3E 08           ld a, 2*4 
0109+  8A85 DD 77 02        ld (ix+player.pattern_def),a
0110+  8A88             .move_player_left_end: 
0111+  8A88 3E 00           ld a,0
0112+  8A8A DD 77 05        ld (ix+player.collision),a
0113+  8A8D C9              ret
0114+  8A8E             left_es_impar: 
0115+  8A8E 3E 0C           ld a, 3*4
0116+  8A90 DD 77 02        ld (ix+player.pattern_def),a 
0117+  8A93 C9              ret
0118+  8A94             move_player_up: 
0119+  8A94                 ;le ponemos la dirección
0120+  8A94 3E 01           ld a,UP
0121+  8A96 DD 77 04        ld (ix+player.direction),a
0122+  8A99             
0123+  8A99                 ;comprobamos los límites de la pantalla
0124+  8A99 DD 7E 00        ld a,(ix+player.y)
0125+  8A9C FE 00           cp 0; 
0126+  8A9E 28 1C           jr z,.move_player_up_end
0127+  8AA0             
0128+  8AA0                 ;comprobamos las colisiones
0129+  8AA0 CD FC 8A        call check_collision_player
0130+  8AA3                 ;si hubo uno colisión saltamos y vamos a la parte final
0131+  8AA3 DD 7E 05        ld a,(ix+player.collision)
0132+  8AA6 FE 01           cp 1
0133+  8AA8 28 12           jr z, .move_player_up_end
0134+  8AAA                 
0135+  8AAA                 ;actualizamos el player
0136+  8AAA DD 7E 00        ld a,(ix+player.y)
0137+  8AAD D6 01           sub 1 
0138+  8AAF DD 77 00        ld (ix+player.y), a 
0139+  8AB2                 ;Ponemos el sprite correspondiente
0140+  8AB2 E6 01           and 1
0141+  8AB4 CA C2 8A        jp z, up_es_impar
0142+  8AB7 3E 10           ld a, 4*4
0143+  8AB9 DD 77 02        ld (ix+player.pattern_def),a
0144+  8ABC             .move_player_up_end: 
0145+  8ABC 3E 00           ld a,0
0146+  8ABE DD 77 05        ld (ix+player.collision),a
0147+  8AC1 C9              ret
0148+  8AC2             up_es_impar: 
0149+  8AC2 3E 14           ld a, 5*4
0150+  8AC4 DD 77 02        ld (ix+player.pattern_def),a 
0151+  8AC7 C9              ret
0152+  8AC8             move_player_down: 
0153+  8AC8                 ;le ponemos la dirección
0154+  8AC8 3E 05           ld a,DOWN
0155+  8ACA DD 77 04        ld (ix+player.direction),a
0156+  8ACD             
0157+  8ACD                 ;comprobamos los límites de la pantalla
0158+  8ACD DD 7E 00        ld a,(ix+player.y)
0159+  8AD0 FE 9F           cp 159; 192-8-8-16-2
0160+  8AD2 28 1C           jr z,.move_player_down_end
0161+  8AD4             
0162+  8AD4             
0163+  8AD4 CD FC 8A        call check_collision_player
0164+  8AD7                 ;si hubo uno colisión saltamos y vamos a la parte final
0165+  8AD7 DD 7E 05        ld a,(ix+player.collision)
0166+  8ADA FE 01           cp 1
0167+  8ADC 28 12           jr z, .move_player_down_end
0168+  8ADE             
0169+  8ADE DD 7E 00        ld a,(ix+player.y)
0170+  8AE1 C6 01           add 1 
0171+  8AE3 DD 77 00        ld (ix+player.y), a 
0172+  8AE6 E6 01           and 1
0173+  8AE8 CA F6 8A        jp z, down_es_impar
0174+  8AEB 3E 18           ld a, 6*4
0175+  8AED DD 77 02        ld (ix+player.pattern_def),a
0176+  8AF0             .move_player_down_end: 
0177+  8AF0 3E 00           ld a,0
0178+  8AF2 DD 77 05        ld (ix+player.collision),a
0179+  8AF5 C9              ret
0180+  8AF6             down_es_impar: 
0181+  8AF6 3E 1C           ld a, 7*4
0182+  8AF8 DD 77 02        ld (ix+player.pattern_def),a 
0183+  8AFB C9              ret
0184+  8AFC             
0185+  8AFC             
0186+  8AFC             ;;--------------------------------------
0187+  8AFC             ;;  CHECKCOLISION
0188+  8AFC             ;;      Output: si hay colsión mete en la variable player.colision=1
0189+  8AFC             check_collision_player: 
0190+  8AFC 21 EC 89        ld hl, player_atributes
0191+  8AFF 7E              ld a,(hl)
0192+  8B00 5F              ld e,a;y
0193+  8B01 23              inc hl
0194+  8B02 7E              ld a,(hl)
0195+  8B03 57              ld d,a;x
0196+  8B04             
0197+  8B04 DD 7E 04        ld a,(ix+player.direction)
0198+  8B07 FE 03           cp RIGHT
0199+  8B09 28 0E           jr z,.get_block_right
0200+  8B0B FE 07           cp LEFT
0201+  8B0D 28 11           jr z,.get_block_left
0202+  8B0F FE 01           cp UP
0203+  8B11 28 14           jr z,.get_block_up
0204+  8B13 FE 05           cp DOWN
0205+  8B15 28 17           jr z,.get_block_down
0206+  8B17             
0207+  8B17 18 19           jr .not_direction_found
0208+  8B19             .get_block_right: 
0209+  8B19 7A              ld a,d
0210+  8B1A C6 04           add 4
0211+  8B1C 57              ld d,a
0212+  8B1D C3 32 8B        jp .not_direction_found
0213+  8B20             .get_block_left: 
0214+  8B20 7A              ld a,d
0215+  8B21 D6 04           sub 4
0216+  8B23 57              ld d,a
0217+  8B24 C3 32 8B        jp .not_direction_found
0218+  8B27             .get_block_up: 
0219+  8B27 7B              ld a,e
0220+  8B28 D6 08           sub 8
0221+  8B2A 5F              ld e,a
0222+  8B2B C3 32 8B        jp .not_direction_found
0223+  8B2E             .get_block_down: 
0224+  8B2E 7B              ld a,e
0225+  8B2F C6 01           add 1
0226+  8B31 5F              ld e,a
0227+  8B32             
0228+  8B32             
0229+  8B32             .not_direction_found: 
0230+  8B32                 ;get_block necesita en el registro e la posición x y en d la posición y, devuelve el resultado en b
0231+  8B32 CD 34 86        call get_block
0232+  8B35 78              ld a,b
0233+  8B36 FE 37           cp TILE_DOOR
0234+  8B38 CA B0 86        jp z,increase_screen
0235+  8B3B FE 20           cp TILE_SOLID ;Si al restalo entre 32 da negatico se activará el flag de carry
0236+  8B3D 30 01           jr nc, colision_player ; si al restarlo  es negativo y dará carry, si no hay está bien
0237+  8B3F             
0238+  8B3F C9              ret
0239+  8B40             
0240+  8B40             colision_player: 
0241+  8B40                 ;call BEEP
0242+  8B40 3E 01           ld a,1
0243+  8B42 DD 77 05        ld (ix+player.collision),a
0244+  8B45 C9              ret
0245+  8B46             recolocate_player: 
0246+  8B46 3E 96           ld a,150
0247+  8B48 DD 77 00        ld (ix+player.y),a
0248+  8B4B 3E 08           ld a,8
0249+  8B4D DD 77 01        ld (ix+player.x),a
0250+  8B50 C9              ret
0278   8B51             	include "src/MSXBasic/enemies.asm"    
0001+  8B51                 struct enemy 
0002+  8B51~            y           db      0
0003+  8B51~            x           db      0
0004+  8B51~            pattern_def db      0; los patrones definicidos será el 0 para el player, el 4 para el player 2, el 8 para el enemy 1,etc
0005+  8B51~            color       db      0
0006+  8B51~            plane       db      0; como con 4 bytes se define un plano en la tabla de atributos de sprites, el player tiene el plano 0, el player 2 el plano 4, el enemy 1 el plano 8
0007+  8B51~            direction   db      0; la dirección puede cambiar su el comportamiento dice que cambie
0008+  8B51~            type        db      0; según el tipo le aplicaemos un comportamiento u otro
0009+  8B51~            counter     db      0; nos ayuda con las animaciones
0010+  8B51~            frame       db      0; nos auyda con las animaciones
0011+  8B51                 ends
0012+  8B51             
0013+  8B51             template_enemy1: 
0014+  8B51 3C              db 60
0015+  8B52 A0              db 160
0016+  8B53 34              db ENEMIGO_ROBOT
0017+  8B54 05              db COLOR_AZUL_MEDIO
0018+  8B55 18              db 6*4; plano 4*4 bytes
0019+  8B56 01              db UP;direction
0020+  8B57 02              db COMPORTAMIENTO_REBOTA_VERTICAL
0021+  8B58 00              db 0
0022+  8B59 00              db 0
0023+  8B5A             
0024+  8B5A             template_enemy2: 
0025+  8B5A 64              db 100
0026+  8B5B C8              db 200
0027+  8B5C 2C              db ENEMIGO_GORDO
0028+  8B5D 04              db COLOR_AZUL_OSCURO;color azul oscuro
0029+  8B5E 0C              db 3*4; plano 2*4 bytes
0030+  8B5F 03              db RIGHT;;direction
0031+  8B60 01              db COMPORTAMIENTO_CORRE_DE_DERECHA_A_IZQUIERDA
0032+  8B61 00              db 0
0033+  8B62 00              db 0
0034+  8B63             template_enemy3: 
0035+  8B63 6E              db 110
0036+  8B64 E6              db 230
0037+  8B65 20              db ENEMIGO_COLETA
0038+  8B66 06              db COLOR_ROJO_OSCURO
0039+  8B67 10              db 4*4; plano 3*4 bytes
0040+  8B68 03              db RIGHT;;direction
0041+  8B69 03              db COMPORTAMIENTO_REBOTA_HORIZONTAL
0042+  8B6A 00              db 0
0043+  8B6B 00              db 0
0044+  8B6C             template_enemy4: 
0045+  8B6C 90              db 144
0046+  8B6D BE              db 190
0047+  8B6E 3C              db ENEMIGO_ENANO
0048+  8B6F 0A              db COLOR_AMARILLO
0049+  8B70 14              db 5*4; plano 4*4 bytes
0050+  8B71 03              db RIGHT;direction
0051+  8B72 00              db COMPORTAMIENTO_CORRE_DE_IZQUIERDA_A_DERCHA
0052+  8B73 00              db 0
0053+  8B74 00              db 0
0054+  8B75             template_enemy5: 
0055+  8B75 82              db 130
0056+  8B76 EF              db 239; en la 1 pantalla empezará en la posición x 230, el límite derecho es 240
0057+  8B77 3C              db ENEMIGO_ENANO
0058+  8B78 0C              db COLOR_VERDE_OSCURO
0059+  8B79 08              db 2*4; plano 1*4 bytes
0060+  8B7A 03              db RIGHT;direction
0061+  8B7B 07              db COMPORTAMIENTO_BAILA;type
0062+  8B7C 00              db 0
0063+  8B7D 00              db 0
0064+  8B7E             template_enemy6: 
0065+  8B7E 78              db 120
0066+  8B7F 78              db 120
0067+  8B80 3C              db ENEMIGO_ENANO
0068+  8B81 08              db COLOR_ROJO_MEDIO
0069+  8B82 1C              db 7*4; plano 4*4 bytes
0070+  8B83 03              db RIGHT;direction
0071+  8B84 03              db COMPORTAMIENTO_REBOTA_HORIZONTAL
0072+  8B85 00              db 0
0073+  8B86 00              db 0
0074+  8B87             SIZE_OF_ENEMY equ 9
0075+  8B87             MAX_ENEMIES equ 6
0076+  8B87 00          enemy_active:  db 0; nos permite hacer el loop y en update_enemies y cuando llegue a MAX_EMIES salimos del update_enemies
0077+  8B88             
0078+  8B88             
0079+  8B88             ;reservamos espacio para 10 enemigos
0080+  8B88             ;max_enemies equ 10
0081+  8B88             ;array_enimies: ds enemy*max_enemies ;son 7 bytes * 10 entidades de enemigos=70 bytes, si te fijas enemy vale el tamaño del struct
0082+  8B88 00          counter_enemy:  db 0
0083+  8B89             ;randData solo es utilizada por la rutina random
0084+  8B89 00 00       randData:  db 0,0
0085+  8B8B             MAX_RETARDO_REDIBUJADO equ 20
0086+  8B8B             
0087+  8B8B             ENEMIGO_COLETA:      equ 32;8 y 9*4, el octavo sprite
0088+  8B8B             ENEMIGO_GORDO:       equ 44;el sprite 10 y 11*4
0089+  8B8B             ENEMIGO_ROBOT:       equ 52;el sprute 12 y 13*4
0090+  8B8B             ENEMIGO_ENANO:       equ 60;el sprite 14 y 15*4
0091+  8B8B             ENEMIGO_MONSTRUO:    equ 68;sprite 17*4
0092+  8B8B             ENEMIGO_VIRUS1:      equ 72;sprite 18*4
0093+  8B8B             ENEMIGO_VIRUS2:      equ 76;sprite 19*4
0094+  8B8B             ENEMIGO_VIRUS3:      equ 80;sprite 20*4
0095+  8B8B             ENEMIGO_VIRUS4:      equ 84;sprite 21*4
0096+  8B8B             
0097+  8B8B             COMPORTAMIENTO_CORRE_DE_IZQUIERDA_A_DERCHA:  equ 0
0098+  8B8B             COMPORTAMIENTO_CORRE_DE_DERECHA_A_IZQUIERDA:  equ 1
0099+  8B8B             COMPORTAMIENTO_REBOTA_HORIZONTAL:  equ 3
0100+  8B8B             COMPORTAMIENTO_REBOTA_VERTICAL:  equ 2
0101+  8B8B             COMPORTAMIENTO_PERSIGUE:  equ 5
0102+  8B8B             COMPORTAMIENTO_STATICO:  equ 6
0103+  8B8B             COMPORTAMIENTO_BAILA:  equ 7
0104+  8B8B             
0105+  8B8B             
0106+  8B8B             
0107+  8B8B             initialize_enemy:  
0108+  8B8B                 ;ld hl, template_enemy
0109+  8B8B                 ;ld de, array_enimies*counter_enemy
0110+  8B8B                 ;ld bc, (counter_enemy*enemy)
0111+  8B8B                 ;ldir
0112+  8B8B C9              ret
0113+  8B8C             
0114+  8B8C             create_enemy: 
0115+  8B8C                 ;ld iy, template_enemy0
0116+  8B8C                 ;ld a,(counter_enemy)
0117+  8B8C                 ;add SIZE_OF_ENEMY
0118+  8B8C                 ;ld (counter_enemy),a    
0119+  8B8C C9              ret
0120+  8B8D             
0121+  8B8D             
0122+  8B8D             update_enemies: 
0123+  8B8D                 ;inicializamos la posición de la memoria donde empiezan nuestras entidades
0124+  8B8D FD 21 51 8B     ld iy,template_enemy1
0125+  8B91                 ;ponemos a 0 la entidad activa
0126+  8B91 AF              xor a
0127+  8B92 32 87 8B        ld (enemy_active),a
0128+  8B95             ;blucle FOR:recorre las entidades desde 0 a MAX_ENTITIES-1
0129+  8B95             .loop: 
0130+  8B95                 ;Obtenemos la entidad activa
0131+  8B95 3A 87 8B        ld a,(enemy_active)
0132+  8B98                 ;si ha llegado al final salimos
0133+  8B98 FE 06           cp MAX_ENEMIES
0134+  8B9A 28 39           jr z,.update_enemies_end
0135+  8B9C                 ;Si no ha llegado al final incrementamos el contador de la entidad activa
0136+  8B9C 3C              inc a
0137+  8B9D 32 87 8B        ld (enemy_active),a
0138+  8BA0                 ;Obtenemos su tipo con el puntero iy
0139+  8BA0 FD 7E 06        ld a,(iy+enemy.type)
0140+  8BA3             
0141+  8BA3                 ;Según el tipo le aplicamos un comportamiento
0142+  8BA3 FE 00           cp COMPORTAMIENTO_CORRE_DE_IZQUIERDA_A_DERCHA
0143+  8BA5 CC 10 8C            call z, move3_enemigo_corre_de_izquierda_a_derecha
0144+  8BA8 FE 01           cp COMPORTAMIENTO_CORRE_DE_DERECHA_A_IZQUIERDA
0145+  8BAA CC 2A 8C            call z, move1_enemigo_corre_de_derecha_a_izquierda
0146+  8BAD FE 02           cp COMPORTAMIENTO_REBOTA_VERTICAL
0147+  8BAF CC 44 8C            call z, move2_enemigo_rebota_vertical
0148+  8BB2 FE 07           cp COMPORTAMIENTO_BAILA
0149+  8BB4 CC D6 8B            call z, move0_enemigo_baila
0150+  8BB7 FE 05           cp COMPORTAMIENTO_PERSIGUE
0151+  8BB9 CC 6E 8C            call z, move4_enemigo_te_persigue
0152+  8BBC FE 03           cp COMPORTAMIENTO_REBOTA_HORIZONTAL
0153+  8BBE CC 6F 8C            call z, move5_enemigo_rebota_izquierda_derecha
0154+  8BC1 FE 06           cp COMPORTAMIENTO_STATICO
0155+  8BC3 CC 99 8C            call z, move6_enemigo_estatico
0156+  8BC6                 ;comprobamos las colisiones
0157+  8BC6 CD 16 8D        call check_collision_enemy
0158+  8BC9                 ;aumentamos en la dirección el tamaña del enemigo, el bloque siguiente hace lo mismo que esto pero según el tamaño del enemigo:
0159+  8BC9 AF              xor a
0160+  8BCA             .loop_iy: 
0161+  8BCA FD 23           inc iy
0162+  8BCC 3C              inc a
0163+  8BCD FE 09           cp SIZE_OF_ENEMY
0164+  8BCF 28 C4           jr z,.loop
0165+  8BD1 18 F7           jr .loop_iy
0166+  8BD3             
0167+  8BD3 18 C0           jr .loop
0168+  8BD5             .update_enemies_end: 
0169+  8BD5 C9              ret
0170+  8BD6             
0171+  8BD6             move0_enemigo_baila: 
0172+  8BD6 FD 7E 07        ld a,(iy+enemy.counter)
0173+  8BD9 C6 01           add 1
0174+  8BDB FD 77 07        ld (iy+enemy.counter),a
0175+  8BDE FE 14           cp MAX_RETARDO_REDIBUJADO
0176+  8BE0 C2 0F 8C        jp nz,.move0_end
0177+  8BE3             
0178+  8BE3 FD 7E 08        ld a,(iy+enemy.frame); 
0179+  8BE6 E6 01           and 1;si el frame es 1
0180+  8BE8                      ;al hacer 0000 0000 (0) and 0000 0001 da 0 y se activa el flag Z. 
0181+  8BE8                      ;al hacer 0000 0001 (1) and 0000 0001 da 1 y no se activa el flag Z. 
0182+  8BE8 CA FC 8B        jp z, .move0_change_sprite
0183+  8BEB 18 00           jr .move0_dibujar
0184+  8BED             .move0_dibujar: 
0185+  8BED FD 7E 02        ld a, (iy+enemy.pattern_def)
0186+  8BF0 D6 04           sub 4;hay que multiplicar por 4 ya que son sprites de 16x16 pixeles, es decir 4 sprites realmente
0187+  8BF2 FD 77 02        ld (iy+enemy.pattern_def),a 
0188+  8BF5 3E 00           ld a,0
0189+  8BF7 FD 77 08        ld (iy+enemy.frame),a;le ponemos el frame 0
0190+  8BFA 18 0E           jr .reseteo
0191+  8BFC             .move0_change_sprite: 
0192+  8BFC FD 7E 02        ld a, (iy+enemy.pattern_def);
0193+  8BFF C6 04           add 4;hay que multiplicar por 4 ya que son sprites de 16x16 pixeles, es decir 4 sprites realmente
0194+  8C01 FD 77 02        ld (iy+enemy.pattern_def),a ;será el byte 13*4=52-48=4
0195+  8C04 3E 01           ld a,1;le ponemos el frame 1
0196+  8C06 FD 36 08 01     ld (iy+enemy.frame),1
0197+  8C0A             .reseteo: 
0198+  8C0A 3E 00           ld a,0
0199+  8C0C FD 77 07        ld (iy+enemy.counter),a
0200+  8C0F             .move0_end: 
0201+  8C0F C9              ret
0202+  8C10             
0203+  8C10             
0204+  8C10             move3_enemigo_corre_de_izquierda_a_derecha: 
0205+  8C10 CD B9 8C        call move_enemy_left
0206+  8C13                 ;chequeo límite izquiedo
0207+  8C13                 ;obtenemos la posición x
0208+  8C13 FD 7E 01        ld a,(iy+enemy.x)
0209+  8C16                 ;si la posición x es 8
0210+  8C16 FE 08           cp 8
0211+  8C18                 ;si al restar entre 8 no es igual a cero saltamos
0212+  8C18 C2 29 8C        jp nz, .end_move3_llega_al_borde_izquierdo
0213+  8C1B                 ;recolocar_enemy:
0214+  8C1B CD CD 8D        call random
0215+  8C1E 3A 89 8B        ld a,(randData)
0216+  8C21 FD 77 00        ld (iy+enemy.y),a
0217+  8C24 3E FA           ld a,250
0218+  8C26 FD 77 01        ld (iy+enemy.x),a
0219+  8C29             
0220+  8C29             .end_move3_llega_al_borde_izquierdo: 
0221+  8C29 C9              ret
0222+  8C2A             
0223+  8C2A             
0224+  8C2A             
0225+  8C2A             move1_enemigo_corre_de_derecha_a_izquierda: 
0226+  8C2A CD 9A 8C        call move_enemy_right
0227+  8C2D                 ;Chekeo de límite derecho
0228+  8C2D                 ;obtenemos la posición x
0229+  8C2D FD 7E 01        ld a,(iy+enemy.x)
0230+  8C30                 ;si la posición x es 248
0231+  8C30 FE F8           cp 248
0232+  8C32                 ;si al restar entre 248 no es igual a cero saltamos
0233+  8C32 C2 43 8C        jp nz, .end_move1
0234+  8C35                 ;Si es igual a 248 recolocamos el enemigo:
0235+  8C35 CD CD 8D        call random
0236+  8C38 3A 89 8B        ld a,(randData)
0237+  8C3B FD 77 00        ld (iy+enemy.y),a
0238+  8C3E 3E 08           ld a,8
0239+  8C40 FD 77 01        ld (iy+enemy.x),a
0240+  8C43             
0241+  8C43             .end_move1: 
0242+  8C43             
0243+  8C43 C9              ret
0244+  8C44             
0245+  8C44             
0246+  8C44             
0247+  8C44             move2_enemigo_rebota_vertical: 
0248+  8C44 FD 7E 05        ld a, (iy+enemy.direction)
0249+  8C47 FE 01           cp 1
0250+  8C49 CC D8 8C        call z, move_enemy_up
0251+  8C4C FE 05           cp 5
0252+  8C4E CC F7 8C        call z, move_enemy_down
0253+  8C51 FD 7E 00        ld a,(iy+enemy.y)
0254+  8C54 FE A0           cp 160
0255+  8C56 CA 61 8C        jp z, .es_1
0256+  8C59 FE 00           cp 0     
0257+  8C5B CA 68 8C        jp z, .es_5
0258+  8C5E C3 6D 8C        jp .end_move2
0259+  8C61             .es_1: 
0260+  8C61 3E 01           ld a,1
0261+  8C63 FD 77 05        ld (iy+enemy.direction),a
0262+  8C66                 ;call BEEP
0263+  8C66 18 05           jr .end_move2
0264+  8C68             .es_5: 
0265+  8C68 3E 05           ld a,5
0266+  8C6A FD 77 05        ld (iy+enemy.direction),a
0267+  8C6D                 ;call BEEP
0268+  8C6D             .end_move2: 
0269+  8C6D C9              ret
0270+  8C6E             
0271+  8C6E             
0272+  8C6E             
0273+  8C6E             
0274+  8C6E             move4_enemigo_te_persigue: 
0275+  8C6E             
0276+  8C6E C9              ret
0277+  8C6F             
0278+  8C6F             move5_enemigo_rebota_izquierda_derecha: 
0279+  8C6F FD 7E 05        ld a, (iy+enemy.direction)
0280+  8C72 FE 03           cp 3
0281+  8C74 CC 9A 8C        call z, move_enemy_right
0282+  8C77 FE 07           cp 7
0283+  8C79 CC B9 8C        call z, move_enemy_left
0284+  8C7C FD 7E 01        ld a,(iy+enemy.x)
0285+  8C7F FE F0           cp 240
0286+  8C81 CA 93 8C        jp z, .es_3
0287+  8C84 FE 00           cp 0     
0288+  8C86 CA 8C 8C        jp z, .es_7
0289+  8C89 C3 98 8C        jp .end_move5
0290+  8C8C             .es_7: 
0291+  8C8C 3E 03           ld a,3
0292+  8C8E FD 77 05        ld (iy+enemy.direction),a
0293+  8C91                 ;call BEEP
0294+  8C91 18 05           jr .end_move5
0295+  8C93             .es_3: 
0296+  8C93 3E 07           ld a,7
0297+  8C95 FD 77 05        ld (iy+enemy.direction),a
0298+  8C98                 ;call BEEP
0299+  8C98             .end_move5: 
0300+  8C98 C9              ret
0301+  8C99             
0302+  8C99             move6_enemigo_estatico: 
0303+  8C99 C9              ret
0304+  8C9A             
0305+  8C9A             
0306+  8C9A             
0307+  8C9A             move_enemy_right: 
0308+  8C9A FD 7E 01        ld a,(iy+enemy.x); 
0309+  8C9D C6 01           add 1  
0310+  8C9F FD 77 01        ld (iy+enemy.x), a 
0311+  8CA2 E6 01           and 1
0312+  8CA4 CA B0 8C        jp z, enemy_right_es_impar
0313+  8CA7 FD 7E 02        ld a, (iy+enemy.pattern_def);
0314+  8CAA D6 04           sub 4
0315+  8CAC FD 77 02        ld (iy+enemy.pattern_def),a 
0316+  8CAF C9              ret
0317+  8CB0             enemy_right_es_impar: 
0318+  8CB0 FD 7E 02        ld a, (iy+enemy.pattern_def);el aprite 12*4=es el byte 48 
0319+  8CB3 C6 04           add 4;hay que multiplicar por 4 ya que son sprites de 16x16 pixeles, es decir 4 sprites realmente
0320+  8CB5 FD 77 02        ld (iy+enemy.pattern_def),a 
0321+  8CB8 C9              ret
0322+  8CB9             
0323+  8CB9             
0324+  8CB9             move_enemy_left: 
0325+  8CB9 FD 7E 01        ld a,(iy+enemy.x); 
0326+  8CBC D6 01           sub 1  
0327+  8CBE FD 77 01        ld (iy+enemy.x), a 
0328+  8CC1 E6 01           and 1
0329+  8CC3 CA CF 8C        jp z, enemy_left_es_impar
0330+  8CC6 FD 7E 02        ld a, (iy+enemy.pattern_def);
0331+  8CC9 D6 04           sub 4
0332+  8CCB FD 77 02        ld (iy+enemy.pattern_def),a 
0333+  8CCE C9              ret
0334+  8CCF             enemy_left_es_impar: 
0335+  8CCF FD 7E 02        ld a, (iy+enemy.pattern_def);el aprite 12*4=es el byte 48 
0336+  8CD2 C6 04           add 4;hay que multiplicar por 4 ya que son sprites de 16x16 pixeles, es decir 4 sprites realmente
0337+  8CD4 FD 77 02        ld (iy+enemy.pattern_def),a 
0338+  8CD7 C9              ret
0339+  8CD8             
0340+  8CD8             
0341+  8CD8             move_enemy_up: 
0342+  8CD8 FD 7E 00        ld a,(iy+enemy.y); 
0343+  8CDB D6 01           sub 1  
0344+  8CDD FD 77 00        ld (iy+enemy.y), a 
0345+  8CE0 E6 01           and 1
0346+  8CE2 CA EE 8C        jp z, enemy_up_es_impar
0347+  8CE5 FD 7E 02        ld a, (iy+enemy.pattern_def);
0348+  8CE8 D6 04           sub 4
0349+  8CEA FD 77 02        ld (iy+enemy.pattern_def),a 
0350+  8CED C9              ret
0351+  8CEE             enemy_up_es_impar: 
0352+  8CEE FD 7E 02        ld a, (iy+enemy.pattern_def);el aprite 12*4=es el byte 48 
0353+  8CF1 C6 04           add 4;hay que multiplicar por 4 ya que son sprites de 16x16 pixeles, es decir 4 sprites realmente
0354+  8CF3 FD 77 02        ld (iy+enemy.pattern_def),a 
0355+  8CF6 C9              ret
0356+  8CF7             
0357+  8CF7             
0358+  8CF7             move_enemy_down: 
0359+  8CF7 FD 7E 00        ld a,(iy+enemy.y); 
0360+  8CFA C6 01           add 1  
0361+  8CFC FD 77 00        ld (iy+enemy.y), a 
0362+  8CFF E6 01           and 1
0363+  8D01 CA 0D 8D        jp z, enemy_down_es_impar
0364+  8D04 FD 7E 02        ld a, (iy+enemy.pattern_def);
0365+  8D07 D6 04           sub 4
0366+  8D09 FD 77 02        ld (iy+enemy.pattern_def),a 
0367+  8D0C C9              ret
0368+  8D0D             enemy_down_es_impar: 
0369+  8D0D FD 7E 02        ld a, (iy+enemy.pattern_def);el aprite 12*4=es el byte 48 
0370+  8D10 C6 04           add 4;hay que multiplicar por 4 ya que son sprites de 16x16 pixeles, es decir 4 sprites realmente
0371+  8D12 FD 77 02        ld (iy+enemy.pattern_def),a 
0372+  8D15 C9              ret
0373+  8D16             
0374+  8D16             
0375+  8D16             
0376+  8D16             ;;--------------------------------------
0377+  8D16             ;;  CHECKCOLISION
0378+  8D16             ;;        Input:
0379+  8D16             ;;              iy=con la dirección del enemigo
0380+  8D16             ;;                  ld iy, enemigo0+SIZE_OF_ENEMY*3
0381+  8D16             ;;                  call check_collision_enemy
0382+  8D16             
0383+  8D16             check_collision_enemy: 
0384+  8D16 FD 7E 00        ld a,(iy+enemy.y)
0385+  8D19 5F              ld e,a;y
0386+  8D1A FD 7E 01        ld a,(iy+enemy.x)
0387+  8D1D 57              ld d,a;x
0388+  8D1E             
0389+  8D1E FD 7E 05        ld a,(iy+enemy.direction)
0390+  8D21 FE 03           cp RIGHT
0391+  8D23 28 0E           jr z,.get_block_right
0392+  8D25 FE 07           cp LEFT
0393+  8D27 28 11           jr z,.get_block_left
0394+  8D29 FE 01           cp UP
0395+  8D2B 28 14           jr z,.get_block_up
0396+  8D2D FE 05           cp DOWN
0397+  8D2F 28 17           jr z,.get_block_down
0398+  8D31             
0399+  8D31 18 19           jr .next
0400+  8D33             .get_block_right: 
0401+  8D33 7A              ld a,d
0402+  8D34 C6 04           add 4
0403+  8D36 57              ld d,a
0404+  8D37 C3 4C 8D        jp .next
0405+  8D3A             .get_block_left: 
0406+  8D3A 7A              ld a,d
0407+  8D3B D6 04           sub 4
0408+  8D3D 57              ld d,a
0409+  8D3E C3 4C 8D        jp .next
0410+  8D41             .get_block_up: 
0411+  8D41 7B              ld a,e
0412+  8D42 D6 08           sub 8
0413+  8D44 5F              ld e,a
0414+  8D45 C3 4C 8D        jp .next
0415+  8D48             .get_block_down: 
0416+  8D48 7B              ld a,e
0417+  8D49 C6 01           add 1
0418+  8D4B 5F              ld e,a
0419+  8D4C             
0420+  8D4C             
0421+  8D4C             .next: 
0422+  8D4C                 ;get_block necesita en el registro e la posición x y en d la posición y, devuelve el resultado en b
0423+  8D4C CD 34 86        call get_block
0424+  8D4F 78              ld a,b
0425+  8D50 FE 20           cp TILE_SOLID ;Si al restalo entre 32 da negatico se activará el flag de carry
0426+  8D52 30 01           jr nc, colision_enemy 
0427+  8D54 C9              ret
0428+  8D55             
0429+  8D55             colision_enemy: 
0430+  8D55 FD 7E 05        ld a,(iy+enemy.direction)
0431+  8D58 FE 07           cp LEFT
0432+  8D5A 28 0C           jr z, .is_LEFT
0433+  8D5C FE 03           cp RIGHT
0434+  8D5E 28 0C           jr z, .is_RIGHT
0435+  8D60 FE 01           cp UP
0436+  8D62 28 0C           jr z, .is_UP
0437+  8D64 FE 05           cp DOWN
0438+  8D66 28 0C           jr z, .is_DOWN
0439+  8D68             .is_LEFT: 
0440+  8D68 3E 03           ld a,3
0441+  8D6A 18 0C           jr .next
0442+  8D6C             .is_RIGHT: 
0443+  8D6C 3E 07           ld a,7
0444+  8D6E 18 08           jr .next
0445+  8D70             .is_UP: 
0446+  8D70 3E 05           ld a,5
0447+  8D72 18 04           jr .next
0448+  8D74             .is_DOWN: 
0449+  8D74 3E 01           ld a,1
0450+  8D76 18 00           jr .next
0451+  8D78             
0452+  8D78             
0453+  8D78             .next: 
0454+  8D78 FD 77 05        ld (iy+enemy.direction),a
0455+  8D7B FD 7E 06        ld a,(iy+enemy.type)
0456+  8D7E FE 00           cp COMPORTAMIENTO_CORRE_DE_IZQUIERDA_A_DERCHA
0457+  8D80 28 06           jr z,.add_8_to_y
0458+  8D82 FE 01           cp COMPORTAMIENTO_CORRE_DE_DERECHA_A_IZQUIERDA
0459+  8D84 28 02           jr z,.add_8_to_y
0460+  8D86 18 08           jr .end_colision_enemy
0461+  8D88             .add_8_to_y: 
0462+  8D88 FD 7E 00        ld a,(iy+enemy.y)
0463+  8D8B C6 08           add 8
0464+  8D8D FD 77 00        ld (iy+enemy.y),a
0465+  8D90             .end_colision_enemy: 
0466+  8D90 C9              ret
0467+  8D91             
0468+  8D91             
0469+  8D91             
0470+  8D91             
0471+  8D91             
0472+  8D91             
0473+  8D91             draw_enemies: 
0474+  8D91 FD 21 51 8B     ld iy, template_enemy1
0475+  8D95 21 00 1B        ld hl, 6912; aquí se podría poner la variable del sistema GRPATR
0476+  8D98 FD 6E 04        ld l,(iy+enemy.plane)
0477+  8D9B                 ;intercambiamos los valores para que tengamos en el registro "de" la dirección de la memoria que necesita LDIRVM
0478+  8D9B EB              ex hl,de
0479+  8D9C 21 51 8B        ld hl, template_enemy1
0480+  8D9F 01 04 00        ld bc, 4; 4 bytes para copiar
0481+  8DA2 D5              push de
0482+  8DA3 E5              push hl
0483+  8DA4 CD 5C 00        call  LDIRVM; ldirvm necesita en hl la dirección de memoria a copiar, en de la dirección de destino y en bc la cantidad ed bytes a copiar
0484+  8DA7 E1              pop hl
0485+  8DA8 D1              pop de
0486+  8DA9 3E 06           ld a, MAX_ENEMIES
0487+  8DAB             .loop: 
0488+  8DAB D6 01           sub 1
0489+  8DAD FE 00           cp 0
0490+  8DAF 28 1B           jr z, .end_draw_enemies
0491+  8DB1 13              inc de
0492+  8DB2 13              inc de
0493+  8DB3 13              inc de
0494+  8DB4 13              inc de;6924,6928,etc
0495+  8DB5 23              inc hl
0496+  8DB6 23              inc hl
0497+  8DB7 23              inc hl
0498+  8DB8 23              inc hl
0499+  8DB9 23              inc hl
0500+  8DBA 23              inc hl
0501+  8DBB 23              inc hl
0502+  8DBC 23              inc hl
0503+  8DBD 23              inc hl;8b3c
0504+  8DBE 01 04 00        ld bc, 4; 4 bytes para copiar
0505+  8DC1 F5              push af
0506+  8DC2 D5              push de
0507+  8DC3 E5              push hl
0508+  8DC4 CD 5C 00        call  LDIRVM; ldirvm necesita en hl la dirección de memoria a copiar, en de la dirección de destino y en bc la cantidad ed bytes a copiar
0509+  8DC7 E1              pop hl
0510+  8DC8 D1              pop de
0511+  8DC9 F1              pop af
0512+  8DCA 18 DF           jr .loop
0513+  8DCC             .end_draw_enemies
0514+  8DCC C9              ret
0515+  8DCD             
0516+  8DCD             
0517+  8DCD             
0518+  8DCD             
0519+  8DCD             
0520+  8DCD             
0521+  8DCD             
0522+  8DCD             ;https://gist.github.com/JohnConnolly0/25c65425cf4f84954585
0523+  8DCD             ; El registro de refresco (R) en el Z80 es muy impredecible ya que se incrementa en cada ciclo.
0524+  8DCD             ; Debido a que puede tener cualquier valor cuando se llama a esta rutina, es muy bueno para números aleatorios.
0525+  8DCD             ; Esta rutina aumenta la aleatoriedad del número ya que forma una dirección basada en el
0526+  8DCD             ; actualiza el estado actual del contador y accede a la memoria en esa dirección.
0527+  8DCD             random: 
0528+  8DCD ED 5F           LD A,R			; Cargo el registro A con el registro r
0529+  8DCF 6F              LD L,A			; Copia el valor del registro a en l
0530+  8DD0 E6 3F           AND %00111111	; 63,#3f,Este enmascaramiento impide que la dirección que estamos formando acceda a la RAM
0531+  8DD2 67              LD H,A			; Copy register A into register H
0532+  8DD3 7E              LD A,(HL)		; Load the pseudo-random value into A
0533+  8DD4 FE 50           cp 80           ;le hacemos la resta con 100 si el resultado es menor que 0 se activará el flag de carry
0534+  8DD6 38 F5           jr c, random    
0535+  8DD8 FE A0           cp 160          ;si el resultado es menor de 160 no se acivará el flag de carry
0536+  8DDA 30 F1           jr nc, random
0537+  8DDC 32 89 8B        ld (randData),a
0538+  8DDF C9              ret
0539+  8DE0             
0540+  8DE0             sacar_sprites_de_pantalla: 
0541+  8DE0 FD 21 51 8B     ld iy, template_enemy1
0542+  8DE4 AF              xor a
0543+  8DE5 32 87 8B        ld (enemy_active),a
0544+  8DE8             .loop: 
0545+  8DE8 3A 87 8B        ld a,(enemy_active)
0546+  8DEB FE 06           cp MAX_ENEMIES
0547+  8DED 28 1F           jr z,.end_sacar_sprites_de_pantalla
0548+  8DEF 3C              inc a
0549+  8DF0 32 87 8B        ld (enemy_active),a
0550+  8DF3 3E D4           ld a,212;y
0551+  8DF5 FD 77 00        ld (iy+enemy.y),a
0552+  8DF8 3E 00           ld a,0;x
0553+  8DFA FD 77 01        ld (iy+enemy.x),a
0554+  8DFD 3E 06           ld a, COMPORTAMIENTO_STATICO
0555+  8DFF FD 77 06        ld (iy+enemy.type),a
0556+  8E02 AF              xor a
0557+  8E03             
0558+  8E03             .loop_iy: 
0559+  8E03 FD 23           inc iy
0560+  8E05 3C              inc a
0561+  8E06 FE 09           cp SIZE_OF_ENEMY
0562+  8E08 28 DE           jr z,.loop
0563+  8E0A 18 F7           jr .loop_iy
0564+  8E0C             
0565+  8E0C 18 DA           jr .loop
0566+  8E0E             .end_sacar_sprites_de_pantalla: 
0567+  8E0E C9              ret
0568+  8E0F             
0569+  8E0F             
0570+  8E0F             ;en la pantalla 2 pondremos 2 que reboten horizonales junto a la puerta y otros 2 que eboten en el pasillo grande
0571+  8E0F             recolocate_enemies_screen_2: 
0572+  8E0F FD 21 51 8B     ld iy, template_enemy1
0573+  8E13 3E 90           ld a,18*8;y
0574+  8E15 FD 77 00        ld (iy+enemy.y),a
0575+  8E18 3E 58           ld a,11*8;x
0576+  8E1A FD 77 01        ld (iy+enemy.x),a
0577+  8E1D 3E 20           ld a,ENEMIGO_COLETA
0578+  8E1F FD 77 02        ld (iy+enemy.pattern_def),a
0579+  8E22 3E 02           ld a, COMPORTAMIENTO_REBOTA_VERTICAL
0580+  8E24 FD 77 06        ld (iy+enemy.type),a
0581+  8E27             
0582+  8E27 FD 21 5A 8B     ld iy, template_enemy2
0583+  8E2B 3E 90           ld a,18*8;y
0584+  8E2D FD 77 00        ld (iy+enemy.y),a
0585+  8E30 3E A0           ld a,20*8;x
0586+  8E32 FD 77 01        ld (iy+enemy.x),a
0587+  8E35 3E 2C           ld a,ENEMIGO_GORDO
0588+  8E37 FD 77 02        ld (iy+enemy.pattern_def),a
0589+  8E3A 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0590+  8E3C FD 77 06        ld (iy+enemy.type),a
0591+  8E3F             
0592+  8E3F FD 21 63 8B     ld iy, template_enemy3
0593+  8E43 3E 50           ld a,10*8;y
0594+  8E45 FD 77 00        ld (iy+enemy.y),a
0595+  8E48 3E 70           ld a,14*8;x
0596+  8E4A FD 77 01        ld (iy+enemy.x),a
0597+  8E4D 3E 2C           ld a,ENEMIGO_GORDO
0598+  8E4F FD 77 02        ld (iy+enemy.pattern_def),a
0599+  8E52 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0600+  8E54 FD 77 06        ld (iy+enemy.type),a
0601+  8E57                 
0602+  8E57 FD 21 6C 8B     ld iy, template_enemy4
0603+  8E5B 3E 60           ld a,12*8;y
0604+  8E5D FD 77 00        ld (iy+enemy.y),a
0605+  8E60 3E 80           ld a,16*8;x
0606+  8E62 FD 77 01        ld (iy+enemy.x),a
0607+  8E65 3E 2C           ld a,ENEMIGO_GORDO
0608+  8E67 FD 77 02        ld (iy+enemy.pattern_def),a
0609+  8E6A 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0610+  8E6C FD 77 06        ld (iy+enemy.type),a
0611+  8E6F             
0612+  8E6F C9              ret
0613+  8E70             recolocate_enemies_screen_3: 
0614+  8E70 FD 21 51 8B     ld iy, template_enemy1
0615+  8E74 3E 90           ld a,18*8;y
0616+  8E76 FD 77 00        ld (iy+enemy.y),a
0617+  8E79 3E 58           ld a,11*8;x
0618+  8E7B FD 77 01        ld (iy+enemy.x),a
0619+  8E7E 3E 20           ld a,ENEMIGO_COLETA
0620+  8E80 FD 77 02        ld (iy+enemy.pattern_def),a
0621+  8E83 3E 02           ld a, COMPORTAMIENTO_REBOTA_VERTICAL
0622+  8E85 FD 77 06        ld (iy+enemy.type),a
0623+  8E88             
0624+  8E88 FD 21 5A 8B     ld iy, template_enemy2
0625+  8E8C 3E 48           ld a,9*8;y
0626+  8E8E FD 77 00        ld (iy+enemy.y),a
0627+  8E91 3E 70           ld a,14*8;x
0628+  8E93 FD 77 01        ld (iy+enemy.x),a
0629+  8E96 3E 3C           ld a,ENEMIGO_ENANO
0630+  8E98 FD 77 02        ld (iy+enemy.pattern_def),a
0631+  8E9B 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0632+  8E9D FD 77 06        ld (iy+enemy.type),a
0633+  8EA0             
0634+  8EA0 FD 21 63 8B     ld iy, template_enemy3
0635+  8EA4 3E 38           ld a,7*8;y
0636+  8EA6 FD 77 00        ld (iy+enemy.y),a
0637+  8EA9 3E 70           ld a,14*8;x
0638+  8EAB FD 77 01        ld (iy+enemy.x),a
0639+  8EAE 3E 44           ld a,ENEMIGO_MONSTRUO
0640+  8EB0 FD 77 02        ld (iy+enemy.pattern_def),a
0641+  8EB3 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0642+  8EB5 FD 77 06        ld (iy+enemy.type),a
0643+  8EB8                 
0644+  8EB8 FD 21 6C 8B     ld iy, template_enemy4
0645+  8EBC 3E 68           ld a,13*8;y
0646+  8EBE FD 77 00        ld (iy+enemy.y),a
0647+  8EC1 3E 80           ld a,16*8;x
0648+  8EC3 FD 77 01        ld (iy+enemy.x),a
0649+  8EC6 3E 2C           ld a,ENEMIGO_GORDO
0650+  8EC8 FD 77 02        ld (iy+enemy.pattern_def),a
0651+  8ECB 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0652+  8ECD FD 77 06        ld (iy+enemy.type),a
0653+  8ED0             
0654+  8ED0 C9              ret
0655+  8ED1             
0656+  8ED1             recolocate_enemies_screen_4: 
0657+  8ED1 FD 21 51 8B     ld iy, template_enemy1
0658+  8ED5 3E 90           ld a,18*8;y
0659+  8ED7 FD 77 00        ld (iy+enemy.y),a
0660+  8EDA 3E 58           ld a,11*8;x
0661+  8EDC FD 77 01        ld (iy+enemy.x),a
0662+  8EDF 3E 20           ld a,ENEMIGO_COLETA
0663+  8EE1 FD 77 02        ld (iy+enemy.pattern_def),a
0664+  8EE4 3E 02           ld a, COMPORTAMIENTO_REBOTA_VERTICAL
0665+  8EE6 FD 77 06        ld (iy+enemy.type),a
0666+  8EE9             
0667+  8EE9 FD 21 5A 8B     ld iy, template_enemy2
0668+  8EED 3E 48           ld a,9*8;y
0669+  8EEF FD 77 00        ld (iy+enemy.y),a
0670+  8EF2 3E 70           ld a,14*8;x
0671+  8EF4 FD 77 01        ld (iy+enemy.x),a
0672+  8EF7 3E 3C           ld a,ENEMIGO_ENANO
0673+  8EF9 FD 77 02        ld (iy+enemy.pattern_def),a
0674+  8EFC 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0675+  8EFE FD 77 06        ld (iy+enemy.type),a
0676+  8F01             
0677+  8F01 FD 21 63 8B     ld iy, template_enemy3
0678+  8F05 3E 38           ld a,7*8;y
0679+  8F07 FD 77 00        ld (iy+enemy.y),a
0680+  8F0A 3E 70           ld a,14*8;x
0681+  8F0C FD 77 01        ld (iy+enemy.x),a
0682+  8F0F 3E 44           ld a,ENEMIGO_MONSTRUO
0683+  8F11 FD 77 02        ld (iy+enemy.pattern_def),a
0684+  8F14 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0685+  8F16 FD 77 06        ld (iy+enemy.type),a
0686+  8F19                 
0687+  8F19 FD 21 6C 8B     ld iy, template_enemy4
0688+  8F1D 3E 68           ld a,13*8;y
0689+  8F1F FD 77 00        ld (iy+enemy.y),a
0690+  8F22 3E 80           ld a,16*8;x
0691+  8F24 FD 77 01        ld (iy+enemy.x),a
0692+  8F27 3E 2C           ld a,ENEMIGO_GORDO
0693+  8F29 FD 77 02        ld (iy+enemy.pattern_def),a
0694+  8F2C 3E 03           ld a, COMPORTAMIENTO_REBOTA_HORIZONTAL
0695+  8F2E FD 77 06        ld (iy+enemy.type),a
0696+  8F31             
0697+  8F31 C9              ret
0698+  8F32             
0699+  8F32             
0700+  8F32             
0279   8F32             
0280   8F32                 include "./src/musicint.asm"
0001+  8F32             
0002+  8F32             HKEYI equ #FD9A
0003+  8F32             HTIMI equ #FD9F ;Vblank
0004+  8F32             MAX_CONTADOR equ 50
0005+  8F32             rutina_previa equ #f202      
0006+  8F32             ;rutina_previa: ds 5      
0007+  8F32             musica_activa:  equ #8504
0008+  8F32             
0009+  8F32             inicilizar_tracker: 
0010+  8F32                 ;Deactivamos las interrupciones
0011+  8F32 F3              di	
0012+  8F33             
0013+  8F33 3A 00 F0        LD		 A, (PT3_SETUP)
0014+  8F36 E6 FE           AND		11111110b
0015+  8F38 32 00 F0        LD		(PT3_SETUP), A
0016+  8F3B             
0017+  8F3B             
0018+  8F3B 3A 04 85        ld a,(musica_activa)
0019+  8F3E FE 01           cp 1;Si es 1 es la música del menu
0020+  8F40 28 06           jr z,.musica_menu
0021+  8F42 FE 02           cp 2
0022+  8F44 28 07           jr z,.musica_ingame
0023+  8F46 18 08           jr .inicializa_cancion
0024+  8F48             .musica_menu
0025+  8F48 21 7A 97        ld hl, menu-99
0026+  8F4B 18 03           jr .inicializa_cancion
0027+  8F4D             .musica_ingame
0028+  8F4D 21 3D 95    	ld hl, ingame-99		; hl vale la direccion donde se encuentra la cancion - 99
0029+  8F50             .inicializa_cancion
0030+  8F50 CD B1 8F    	call PT3_INIT			; Inicia el reproductor de PT3
0031+  8F53                 
0032+  8F53                 ;Salvamos la rutina ISR(Interrupt service routine) si hubiese alguna.Son 5 bytes
0033+  8F53 21 9F FD        ld hl,HTIMI
0034+  8F56 11 02 F2        ld de,rutina_previa
0035+  8F59 01 05 00        ld bc,5
0036+  8F5C ED B0           ldir
0037+  8F5E             
0038+  8F5E             
0039+  8F5E                 ;instalamos nuestra rutina
0040+  8F5E 3E C3           ld a,#c3
0041+  8F60 32 9F FD        ld (HTIMI),a
0042+  8F63 21 6B 8F        ld hl, reproducir_bloque_musica
0043+  8F66 22 A0 FD        ld (HTIMI+1), hl
0044+  8F69                 ;Activamos las interrupciones
0045+  8F69 FB          	ei 
0046+  8F6A                 ;Volvemos al basic
0047+  8F6A C9              ret
0048+  8F6B             
0049+  8F6B             reproducir_bloque_musica: 
0050+  8F6B                 ;------------------Reproducir Bloque de múscia--------
0051+  8F6B                 ;halt						;sincronizacion
0052+  8F6B             	;di
0053+  8F6B 3A 04 85        ld a,(musica_activa)
0054+  8F6E B7              or a
0055+  8F6F CA 79 8F        jp z,.end_reproducir_bloque_musica
0056+  8F72 CD F6 94    	call	PT3_ROUT			;Borrar el valor anterior
0057+  8F75 CD FE 93    	call	PT3_PLAY			;Reproduce el siguiente trozo de canción
0058+  8F78                 ;ei
0059+  8F78                 ;--------------Fin de reproducir bloque de música-----
0060+  8F78                 ;lanzamos la rutina que había
0061+  8F78                 ;jp rutina_previa
0062+  8F78                 ;Volvemos al basic
0063+  8F78 C9              ret
0064+  8F79             .end_reproducir_bloque_musica: 
0065+  8F79 CD A5 8F        call PT3_MUTE
0066+  8F7C C9              ret
0067+  8F7D             para_cancion: 
0068+  8F7D                 ;volvemos a poner los 5 bytes que tenía
0069+  8F7D F3              di
0070+  8F7E 21 02 F2        ld hl,rutina_previa
0071+  8F81 11 9F FD        ld de,HTIMI
0072+  8F84 01 05 00        ld bc,5
0073+  8F87 ED B0           ldir
0074+  8F89                 ;call PT3_MUTE
0075+  8F89 AF              xor a
0076+  8F8A 32 04 85        ld (musica_activa),a
0077+  8F8D                 ;ei
0078+  8F8D C9              ret
0079+  8F8E             
0080+  8F8E             sigue_musica: 
0081+  8F8E 3E 01           ld a,1
0082+  8F90 32 04 85        ld (musica_activa),a
0083+  8F93 C9              ret
0084+  8F94             
0085+  8F94             
0086+  8F94             
0087+  8F94             tracker: 
0088+  8F94             	include	"./src/PT3_player.asm"					;replayer de PT3
0001++ 8F94             		; --- PT3 REPLAYER WORKING ON ROM ---
0002++ 8F94             		; --- Can be assembled with asMSX ---
0003++ 8F94             		; --- ROM version: MSX-KUN        ---
0004++ 8F94             		; --- asMSX version 2: SapphiRe   ---
0005++ 8F94             
0006++ 8F94             ; Based on MSX full version of PT3 by Dioniso
0007++ 8F94             ;
0008++ 8F94             ; This version of the replayer can be used with any note table
0009++ 8F94             ; This version also allows the use of PT3 commands
0010++ 8F94             ; First 99 bytes of each PT3 module should be stripped off
0011++ 8F94             ;
0012++ 8F94             ; PLAY and PSG WRITE routines seperated to allow independent calls
0013++ 8F94             ;
0014++ 8F94             ; ROM LENGTH: 1549 bytes
0015++ 8F94             ; RAM LENGTH:  576 bytes
0016++ 8F94             
0017++ 8F94             
0018++ 8F94             
0019++ 8F94             ;SJASM version by BTV 2016
0020++ 8F94             
0021++ 8F94             
0022++ 8F94             		; --- CONSTANT VALUES DEFINITION ---
0023++ 8F94             
0024++ 8F94             ;ChannelsVars
0025++ 8F94             ;struc	CHNPRM
0026++ 8F94             ;reset group
0027++ 8F94             CHNPRM_PsInOr	equ 0	;RESB 1
0028++ 8F94             CHNPRM_PsInSm	equ 1	;RESB 1
0029++ 8F94             CHNPRM_CrAmSl	equ 2	;RESB 1
0030++ 8F94             CHNPRM_CrNsSl	equ 3	;RESB 1
0031++ 8F94             CHNPRM_CrEnSl	equ 4	;RESB 1
0032++ 8F94             CHNPRM_TSlCnt	equ 5	;RESB 1
0033++ 8F94             CHNPRM_CrTnSl	equ 6	;RESW 1
0034++ 8F94             CHNPRM_TnAcc	equ 8	;RESW 1
0035++ 8F94             CHNPRM_COnOff	equ 10	;RESB 1
0036++ 8F94             ;reset group
0037++ 8F94             
0038++ 8F94             CHNPRM_OnOffD	equ 11	;RESB 1
0039++ 8F94             
0040++ 8F94             ;IX for PTDECOD here [+12]
0041++ 8F94             CHNPRM_OffOnD	equ 12	;RESB 1
0042++ 8F94             CHNPRM_OrnPtr	equ 13	;RESW 1
0043++ 8F94             CHNPRM_SamPtr	equ 15	;RESW 1
0044++ 8F94             CHNPRM_NNtSkp	equ 17	;RESB 1
0045++ 8F94             CHNPRM_Note	equ 18	;RESB 1
0046++ 8F94             CHNPRM_SlToNt	equ 19	;RESB 1
0047++ 8F94             CHNPRM_Env_En	equ 20	;RESB 1
0048++ 8F94             CHNPRM_Flags	equ 21	;RESB 1
0049++ 8F94              ;Enabled - 0,SimpleGliss - 2
0050++ 8F94             CHNPRM_TnSlDl	equ 22	;RESB 1
0051++ 8F94             CHNPRM_TSlStp	equ 23	;RESW 1
0052++ 8F94             CHNPRM_TnDelt	equ 25	;RESW 1
0053++ 8F94             CHNPRM_NtSkCn	equ 27	;RESB 1
0054++ 8F94             CHNPRM_Volume	equ 28	;RESB 1
0055++ 8F94             CHNPRM_Size	equ 29	;RESB 1
0056++ 8F94             ;endstruc
0057++ 8F94             
0058++ 8F94             ;struc	AR
0059++ 8F94             AR_TonA		equ 0	;RESW 1
0060++ 8F94             AR_TonB		equ 2	;RESW 1
0061++ 8F94             AR_TonC		equ 4	;RESW 1
0062++ 8F94             AR_Noise	equ 6	;RESB 1
0063++ 8F94             AR_Mixer	equ 7	;RESB 1
0064++ 8F94             AR_AmplA	equ 8	;RESB 1
0065++ 8F94             AR_AmplB	equ 9	;RESB 1
0066++ 8F94             AR_AmplC	equ 10	;RESB 1
0067++ 8F94             AR_Env		equ 11	;RESW 1
0068++ 8F94             AR_EnvTp	equ 13	;RESB 1
0069++ 8F94             ;endstruc
0070++ 8F94              
0071++ 8F94             		; --- CODE STARTS HERE ---
0072++ 8F94             
0073++ 8F94 21 00 F0    CHECKLP: 	LD	HL,PT3_SETUP
0074++ 8F97 CB FE       		SET	7,[HL]
0075++ 8F99 CB 46       		BIT	0,[HL]
0076++ 8F9B C8          		RET	Z
0077++ 8F9C E1          		POP	HL
0078++ 8F9D 21 7A F0    		LD	HL,DelyCnt
0079++ 8FA0 34          		INC	[HL]
0080++ 8FA1 21 3E F0    		LD	HL,ChanA+CHNPRM_NtSkCn
0081++ 8FA4 34          		INC	[HL]
0082++ 8FA5 AF          PT3_MUTE: 	XOR	A
0083++ 8FA6 67          		LD	H,A
0084++ 8FA7 6F          		LD	L,A
0085++ 8FA8 32 48 F1    		LD	[AYREGS+AR_AmplA],A
0086++ 8FAB 22 49 F1    		LD	[AYREGS+AR_AmplB],HL
0087++ 8FAE C3 F7 94    		JP	ROUT_A0
0088++ 8FB1             
0089++ 8FB1             PT3_INIT: 	;HL - AddressOfModule - 100
0090++ 8FB1 22 01 F0    		LD [PT3_MODADDR],HL
0091++ 8FB4 E5          		PUSH HL
0092++ 8FB5 11 64 00    		LD DE,100
0093++ 8FB8 19          		ADD HL,DE
0094++ 8FB9 7E          		LD A,[HL]
0095++ 8FBA 32 1C F0    		LD [PT3_Delay],A
0096++ 8FBD E5          		PUSH HL
0097++ 8FBE DD E1       		POP IX
0098++ 8FC0 19          		ADD HL,DE
0099++ 8FC1 22 03 F0    		LD [PT3_CrPsPtr],HL
0100++ 8FC4 DD 5E 02    		LD E,[IX+102-100]
0101++ 8FC7 19          		ADD HL,DE
0102++ 8FC8 23          		INC HL
0103++ 8FC9 22 18 F0    		LD [PT3_LPosPtr],HL
0104++ 8FCC D1          		POP DE
0105++ 8FCD DD 6E 03    		LD L,[IX+103-100]
0106++ 8FD0 DD 66 04    		LD H,[IX+104-100]
0107++ 8FD3 19          		ADD HL,DE
0108++ 8FD4 22 1A F0    		LD [PT3_PatsPtr],HL
0109++ 8FD7 21 A9 00    		LD HL,169
0110++ 8FDA 19          		ADD HL,DE
0111++ 8FDB 22 07 F0    		LD [PT3_OrnPtrs],HL
0112++ 8FDE 21 69 00    		LD HL,105
0113++ 8FE1 19          		ADD HL,DE
0114++ 8FE2 22 05 F0    		LD [PT3_SAMPTRS],HL
0115++ 8FE5 21 00 F0    		LD HL,PT3_SETUP
0116++ 8FE8 CB BE       		RES 7,[HL]
0117++ 8FEA             
0118++ 8FEA             		; --- note table data depacker ---
0119++ 8FEA             		; Depacks first 12 tones of each tone table
0120++ 8FEA             
0121++ 8FEA 11 6B 95    		LD DE,T_PACK
0122++ 8FED 01 B1 F1    		LD BC,T1_+(2*49)-1
0123++ 8FF0 1A          .TP_0: 		LD A,[DE]
0124++ 8FF1 13          		INC DE
0125++ 8FF2 FE 1E       		CP 15*2
0126++ 8FF4 30 06       		JR NC,.TP_1
0127++ 8FF6 67          		LD H,A
0128++ 8FF7 1A          		LD A,[DE]
0129++ 8FF8 6F          		LD L,A
0130++ 8FF9 13          		INC DE
0131++ 8FFA 18 07       		JR .TP_2
0132++ 8FFC D5          .TP_1: 		PUSH DE
0133++ 8FFD 16 00       		LD D,0
0134++ 8FFF 5F          		LD E,A
0135++ 9000 19          		ADD HL,DE
0136++ 9001 19          		ADD HL,DE
0137++ 9002 D1          		POP DE
0138++ 9003 7C          .TP_2: 		LD A,H
0139++ 9004 02          		LD [BC],A
0140++ 9005 0B          		DEC BC
0141++ 9006 7D          		LD A,L
0142++ 9007 02          		LD [BC],A
0143++ 9008 0B          		DEC BC
0144++ 9009 D6 F0       		SUB $F0
0145++ 900B 20 E3       		JR NZ,.TP_0
0146++ 900D             
0147++ 900D             		; --- INITIALIZE PT3 VARIABLES ---
0148++ 900D 21 23 F0    		LD HL,VARS
0149++ 9010 77          		LD [HL],A
0150++ 9011 11 24 F0    		LD DE,VARS+1
0151++ 9014 01 2C 01    		LD BC,VAR0END-VARS-1
0152++ 9017 ED B0       		LDIR
0153++ 9019             
0154++ 9019 3C          		INC A
0155++ 901A 32 7A F0    		LD [DelyCnt],A
0156++ 901D 21 01 F0    		LD HL,$F001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
0157++ 9020 22 3E F0    		LD [ChanA+CHNPRM_NtSkCn],HL
0158++ 9023 22 5B F0    		LD [ChanB+CHNPRM_NtSkCn],HL
0159++ 9026 22 78 F0    		LD [ChanC+CHNPRM_NtSkCn],HL
0160++ 9029             
0161++ 9029 21 67 95    		LD HL,EMPTYSAMORN
0162++ 902C 22 12 F0    		LD [PT3_AdInPtA],HL ;ptr to zero
0163++ 902F 22 30 F0    		LD [ChanA+CHNPRM_OrnPtr],HL ;ornament 0 is "0,1,0"
0164++ 9032 22 4D F0    		LD [ChanB+CHNPRM_OrnPtr],HL ;in all versions from
0165++ 9035 22 6A F0    		LD [ChanC+CHNPRM_OrnPtr],HL ;3.xx to 3.6x and VTII
0166++ 9038             
0167++ 9038 22 32 F0    		LD [ChanA+CHNPRM_SamPtr],HL ;S1 There is no default
0168++ 903B 22 4F F0    		LD [ChanB+CHNPRM_SamPtr],HL ;S2 sample in PT3, so, you
0169++ 903E 22 6C F0    		LD [ChanC+CHNPRM_SamPtr],HL ;S3 can comment S1,2,3; see
0170++ 9041             					    ;also EMPTYSAMORN comment
0171++ 9041             
0172++ 9041             		; --- NOTE TABLE CREATOR (c) Ivan Roshin, adapted by SapphiRe ---
0173++ 9041 DD 7E FF    		LD A,[IX+99-100] ;TONE TABLE NUMBER
0174++ 9044 17          		RLA
0175++ 9045 E6 07       		AND 7
0176++ 9047 21 17 95    		LD HL,NT_DATA
0177++ 904A D5          		PUSH DE
0178++ 904B 50          		LD D,B		; ld d,0 (bc is 0000 after LDIR)
0179++ 904C 87          		ADD A,A
0180++ 904D 5F          		LD E,A
0181++ 904E 19          		ADD HL,DE	; hl -> init of correct note table data
0182++ 904F 5E          		LD E,[HL]
0183++ 9050 23          		INC HL
0184++ 9051 CB 3B       		SRL E
0185++ 9053 9F          		SBC A,A
0186++ 9054 E6 A7       		AND $A7			;$00 (NOP) or $A7 (AND A)
0187++ 9056 32 21 F0    		LD [PT3_NTL3],A		; CORRECT INSTRUCTION, DEPENDS OF SELECTED TABLE
0188++ 9059 3E C9       		LD A,$C9		; RET CODE
0189++ 905B 32 22 F0    		LD [PT3_NTL3+1],A	; RET PLACED
0190++ 905E EB          		EX DE,HL
0191++ 905F C1          		POP BC ;BC=T1_
0192++ 9060 09          		ADD HL,BC
0193++ 9061             
0194++ 9061 1A          		LD A,[DE]                           
0195++ 9062             
0196++ 9062 01 27 95    		LD BC,T_
0197++ 9065 81          		ADD A,C
0198++ 9066 4F          		LD C,A
0199++ 9067 88          		ADC A,B
0200++ 9068             
0201++ 9068 91          		SUB C
0202++ 9069 47          		LD B,A
0203++ 906A C5          		PUSH BC
0204++ 906B 11 80 F0    		LD DE,NT_
0205++ 906E D5          		PUSH DE
0206++ 906F             
0207++ 906F 06 0C       		LD B,12
0208++ 9071 C5          .L1: 		PUSH BC
0209++ 9072 4E          		LD C,[HL]
0210++ 9073 23          		INC HL
0211++ 9074 E5          		PUSH HL
0212++ 9075 46          		LD B,[HL]
0213++ 9076             
0214++ 9076 D5          		PUSH DE
0215++ 9077 EB          		EX DE,HL
0216++ 9078 11 17 00    		LD DE,23
0217++ 907B DD 26 08    		db $DD,$26,$08	;LD XH,8
0218++ 907E             
0219++ 907E CB 38       .L2: 		SRL B
0220++ 9080 CB 19       		RR C
0221++ 9082 CD 21 F0    .L3: 		CALL PT3_NTL3	;AND A or NOP
0222++ 9085 79          		LD A,C
0223++ 9086 8A          		ADC A,D	;=ADC 0
0224++ 9087 77          		LD [HL],A
0225++ 9088 23          		INC HL
0226++ 9089 78          		LD A,B
0227++ 908A 8A          		ADC A,D
0228++ 908B 77          		LD [HL],A
0229++ 908C 19          		ADD HL,DE
0230++ 908D DD 25       		db $DD,$25	;DEC XH
0231++ 908F 20 ED       		JR NZ,.L2
0232++ 9091             
0233++ 9091 D1          		POP DE
0234++ 9092 13          		INC DE
0235++ 9093 13          		INC DE
0236++ 9094 E1          		POP HL
0237++ 9095 23          		INC HL
0238++ 9096 C1          		POP BC
0239++ 9097 10 D8       		DJNZ .L1
0240++ 9099             
0241++ 9099 E1          		POP HL
0242++ 909A D1          		POP DE
0243++ 909B             
0244++ 909B 7B          		LD A,E
0245++ 909C D5          		PUSH DE
0246++ 909D 11 33 95    		LD DE,TCOLD_1
0247++ 90A0 BB          		CP E
0248++ 90A1 D1          		POP DE
0249++ 90A2 20 05       		JR NZ,.CORR_1
0250++ 90A4 3E FD       		LD A,$FD
0251++ 90A6 32 AE F0    		LD [NT_+$2E],A
0252++ 90A9             
0253++ 90A9 1A          .CORR_1: 	LD A,[DE]
0254++ 90AA A7          		AND A
0255++ 90AB 28 11       		JR Z,.TC_EXIT
0256++ 90AD 1F          		RRA
0257++ 90AE F5          		PUSH AF
0258++ 90AF 87          		ADD A,A
0259++ 90B0 4F          		LD C,A
0260++ 90B1 09          		ADD HL,BC
0261++ 90B2 F1          		POP AF
0262++ 90B3 30 02       		JR NC,.CORR_2
0263++ 90B5 35          		DEC [HL]
0264++ 90B6 35          		DEC [HL]
0265++ 90B7 34          .CORR_2: 	INC [HL]
0266++ 90B8 A7          		AND A
0267++ 90B9 ED 42       		SBC HL,BC
0268++ 90BB 13          		INC DE
0269++ 90BC 18 EB       		JR .CORR_1
0270++ 90BE             
0271++ 90BE             .TC_EXIT: 	;POP AF
0272++ 90BE             
0273++ 90BE             		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
0274++ 90BE 21 11 00    		ld	hl,$11
0275++ 90C1 54          		ld	d,h
0276++ 90C2 5C          		ld	e,h
0277++ 90C3 DD 21 50 F1 		ld	IX,VT_+16
0278++ 90C7 06 0F       		ld	b,15
0279++ 90C9 E5          .INITV1: 	push	hl
0280++ 90CA 19          		add	hl,de
0281++ 90CB EB          		ex	de,hl
0282++ 90CC ED 62       		sbc	hl,hl
0283++ 90CE 48          		ld	c,b
0284++ 90CF 06 10       		ld	b,16
0285++ 90D1 7D          .INITV2: 	ld	a,l
0286++ 90D2 17          		rla
0287++ 90D3 7C          		ld	a,h
0288++ 90D4 CE 00       		adc	a,0
0289++ 90D6 DD 77 00    		ld	[ix],a
0290++ 90D9 DD 23       		inc	ix
0291++ 90DB 19          		add	hl,de
0292++ 90DC 10 F3       		djnz	.INITV2
0293++ 90DE E1          		pop	hl
0294++ 90DF 7B          		ld	a,e
0295++ 90E0 FE 77       		cp	$77
0296++ 90E2 20 01       		jr	nz,.INITV3
0297++ 90E4 1C          		inc	e
0298++ 90E5 41          .INITV3: 	ld	b,c
0299++ 90E6 10 E1       		djnz	.INITV1
0300++ 90E8             
0301++ 90E8 C9          		RET
0302++ 90E9             
0303++ 90E9             		;pattern decoder
0304++ 90E9 DD 36 08 00 PD_OrSm: 	LD [IX+(CHNPRM_Env_En-12)],0
0305++ 90ED CD 73 92    		CALL SETORN
0306++ 90F0 0A          		LD A,[BC]
0307++ 90F1 03          		INC BC
0308++ 90F2 0F          		RRCA
0309++ 90F3             
0310++ 90F3 87          PD_SAM: 		ADD A,A
0311++ 90F4 5F          PD_SAM_: 	LD E,A
0312++ 90F5 16 00       		LD D,0
0313++ 90F7 2A 05 F0    		LD HL,[PT3_SAMPTRS]
0314++ 90FA 19          		ADD HL,DE
0315++ 90FB 5E          		LD E,[HL]
0316++ 90FC 23          		INC HL
0317++ 90FD 56          		LD D,[HL]
0318++ 90FE 2A 01 F0    		LD HL,[PT3_MODADDR]
0319++ 9101 19          		ADD HL,DE
0320++ 9102 DD 75 03    		LD [IX+(CHNPRM_SamPtr-12)],L
0321++ 9105 DD 74 04    		LD [IX+(CHNPRM_SamPtr+1-12)],H
0322++ 9108 18 41       		JR PD_LOOP
0323++ 910A             
0324++ 910A 07          PD_VOL: 		RLCA
0325++ 910B 07          		RLCA
0326++ 910C 07          		RLCA
0327++ 910D 07          		RLCA
0328++ 910E DD 77 10    		LD [IX+(CHNPRM_Volume-12)],A
0329++ 9111 18 3B       		JR PD_LP2
0330++ 9113             	
0331++ 9113 DD 77 08    PD_EOff: 	LD [IX+(CHNPRM_Env_En-12)],A
0332++ 9116 DD 77 F4    		LD [IX+(CHNPRM_PsInOr-12)],A
0333++ 9119 18 33       		JR PD_LP2
0334++ 911B             
0335++ 911B 3D          PD_SorE: 	DEC A
0336++ 911C 20 07       		JR NZ,PD_ENV
0337++ 911E 0A          		LD A,[BC]
0338++ 911F 03          		INC BC
0339++ 9120 DD 77 05    		LD [IX+(CHNPRM_NNtSkp-12)],A
0340++ 9123 18 29       		JR PD_LP2
0341++ 9125             
0342++ 9125 CD 57 92    PD_ENV: 		CALL SETENV
0343++ 9128 18 24       		JR PD_LP2
0344++ 912A             
0345++ 912A CD 73 92    PD_ORN: 		CALL SETORN
0346++ 912D 18 1C       		JR PD_LOOP
0347++ 912F                    
0348++ 912F DD 77 08    PD_ESAM: 	LD [IX+(CHNPRM_Env_En-12)],A
0349++ 9132 DD 77 F4    		LD [IX+(CHNPRM_PsInOr-12)],A
0350++ 9135 C4 57 92    		CALL NZ,SETENV
0351++ 9138 0A          		LD A,[BC]
0352++ 9139 03          		INC BC
0353++ 913A 18 B8       		JR PD_SAM_
0354++ 913C             
0355++ 913C DD 7E 06    PTDECOD: 	LD A,[IX+(CHNPRM_Note-12)]
0356++ 913F 32 0F F0    		LD [PT3_PrNote],A
0357++ 9142 DD 6E FA    		LD L,[IX+(CHNPRM_CrTnSl-12)]
0358++ 9145 DD 66 FB    		LD H,[IX+(CHNPRM_CrTnSl+1-12)]
0359++ 9148 22 10 F0    		LD [PT3_PrSlide],HL
0360++ 914B             
0361++ 914B 11 10 20    PD_LOOP: 	LD DE,$2010
0362++ 914E 0A          PD_LP2: 		LD A,[BC]
0363++ 914F 03          		INC BC
0364++ 9150 83          		ADD A,E
0365++ 9151 38 96       		JR C,PD_OrSm
0366++ 9153 82          		ADD A,D
0367++ 9154 28 4A       		JR Z,PD_FIN
0368++ 9156 38 9B       		JR C,PD_SAM
0369++ 9158 83          		ADD A,E
0370++ 9159 28 25       		JR Z,PD_REL
0371++ 915B 38 AD       		JR C,PD_VOL
0372++ 915D 83          		ADD A,E
0373++ 915E 28 B3       		JR Z,PD_EOff
0374++ 9160 38 B9       		JR C,PD_SorE
0375++ 9162 C6 60       		ADD A,96
0376++ 9164 38 20       		JR C,PD_NOTE
0377++ 9166 83          		ADD A,E
0378++ 9167 38 C1       		JR C,PD_ORN
0379++ 9169 82          		ADD A,D
0380++ 916A 38 0F       		JR C,PD_NOIS
0381++ 916C 83          		ADD A,E
0382++ 916D 38 C0       		JR C,PD_ESAM
0383++ 916F 87          		ADD A,A
0384++ 9170 5F          		LD E,A
0385++ 9171 21 AC 71    		LD HL,(SPCCOMS+$DF20) % 65536	; Adapted from original Speccy version (saves 6 bytes)
0386++ 9174 19          		ADD HL,DE
0387++ 9175 5E          		LD E,[HL]
0388++ 9176 23          		INC HL
0389++ 9177 56          		LD D,[HL]
0390++ 9178 D5          		PUSH DE
0391++ 9179 18 D0       		JR PD_LOOP
0392++ 917B             
0393++ 917B 32 7E F0    PD_NOIS: 	LD [Ns_Base],A
0394++ 917E 18 CE       		JR PD_LP2
0395++ 9180             
0396++ 9180 DD CB 09 86 PD_REL: 		RES 0,[IX+(CHNPRM_Flags-12)]
0397++ 9184 18 08       		JR PD_RES
0398++ 9186             	
0399++ 9186 DD 77 06    PD_NOTE: 	LD [IX+(CHNPRM_Note-12)],A
0400++ 9189 DD CB 09 C6 		SET 0,[IX+(CHNPRM_Flags-12)]
0401++ 918D AF          		XOR A
0402++ 918E             
0403++ 918E ED 73 09 F0 PD_RES: 		LD [PT3_PDSP],SP
0404++ 9192 DD F9       		LD SP,IX
0405++ 9194 67          		LD H,A
0406++ 9195 6F          		LD L,A
0407++ 9196 E5          		PUSH HL
0408++ 9197 E5          		PUSH HL
0409++ 9198 E5          		PUSH HL
0410++ 9199 E5          		PUSH HL
0411++ 919A E5          		PUSH HL
0412++ 919B E5          		PUSH HL
0413++ 919C ED 7B 09 F0 		LD SP,[PT3_PDSP]
0414++ 91A0             
0415++ 91A0 DD 7E 05    PD_FIN: 		LD A,[IX+(CHNPRM_NNtSkp-12)]
0416++ 91A3 DD 77 0F    		LD [IX+(CHNPRM_NtSkCn-12)],A
0417++ 91A6 C9          		RET
0418++ 91A7             
0419++ 91A7 DD CB 09 96 C_PORTM: 	RES 2,[IX+(CHNPRM_Flags-12)]
0420++ 91AB 0A          		LD A,[BC]
0421++ 91AC 03          		INC BC
0422++ 91AD             		;SKIP PRECALCULATED TONE DELTA [BECAUSE
0423++ 91AD             		;CANNOT BE RIGHT AFTER PT3 COMPILATION]
0424++ 91AD 03          		INC BC
0425++ 91AE 03          		INC BC
0426++ 91AF DD 77 0A    		LD [IX+(CHNPRM_TnSlDl-12)],A
0427++ 91B2 DD 77 F9    		LD [IX+(CHNPRM_TSlCnt-12)],A
0428++ 91B5 11 80 F0    		LD DE,NT_
0429++ 91B8 DD 7E 06    		LD A,[IX+(CHNPRM_Note-12)]
0430++ 91BB DD 77 07    		LD [IX+(CHNPRM_SlToNt-12)],A
0431++ 91BE 87          		ADD A,A
0432++ 91BF 6F          		LD L,A
0433++ 91C0 26 00       		LD H,0
0434++ 91C2 19          		ADD HL,DE
0435++ 91C3 7E          		LD A,[HL]
0436++ 91C4 23          		INC HL
0437++ 91C5 66          		LD H,[HL]
0438++ 91C6 6F          		LD L,A
0439++ 91C7 E5          		PUSH HL
0440++ 91C8 3A 0F F0    		LD A,[PT3_PrNote]
0441++ 91CB DD 77 06    		LD [IX+(CHNPRM_Note-12)],A
0442++ 91CE 87          		ADD A,A
0443++ 91CF 6F          		LD L,A
0444++ 91D0 26 00       		LD H,0
0445++ 91D2 19          		ADD HL,DE
0446++ 91D3 5E          		LD E,[HL]
0447++ 91D4 23          		INC HL
0448++ 91D5 56          		LD D,[HL]
0449++ 91D6 E1          		POP HL
0450++ 91D7 ED 52       		SBC HL,DE
0451++ 91D9 DD 75 0D    		LD [IX+(CHNPRM_TnDelt-12)],L
0452++ 91DC DD 74 0E    		LD [IX+(CHNPRM_TnDelt+1-12)],H
0453++ 91DF ED 5B 10 F0 		LD DE,[PT3_PrSlide]
0454++ 91E3 DD 73 FA    		LD [IX+(CHNPRM_CrTnSl-12)],E
0455++ 91E6 DD 72 FB    		LD [IX+(CHNPRM_CrTnSl+1-12)],D
0456++ 91E9 0A          		LD A,[BC] ;SIGNED TONE STEP
0457++ 91EA 03          		INC BC
0458++ 91EB 08          		EX AF,AF'
0459++ 91EC 0A          		LD A,[BC]
0460++ 91ED 03          		INC BC
0461++ 91EE A7          		AND A
0462++ 91EF 28 01       		JR Z,.NOSIG
0463++ 91F1 EB          		EX DE,HL
0464++ 91F2 ED 52       .NOSIG: 	SBC HL,DE
0465++ 91F4 F2 FC 91    		JP P,SET_STP
0466++ 91F7 2F          		CPL
0467++ 91F8 08          		EX AF,AF'
0468++ 91F9 ED 44       		NEG
0469++ 91FB 08          		EX AF,AF'
0470++ 91FC DD 77 0C    SET_STP: 	LD [IX+(CHNPRM_TSlStp+1-12)],A
0471++ 91FF 08          		EX AF,AF'
0472++ 9200 DD 77 0B    		LD [IX+(CHNPRM_TSlStp-12)],A
0473++ 9203 DD 36 FE 00 		LD [IX+(CHNPRM_COnOff-12)],0
0474++ 9207 C9          		RET
0475++ 9208             
0476++ 9208 DD CB 09 D6 C_GLISS: 	SET 2,[IX+(CHNPRM_Flags-12)]
0477++ 920C 0A          		LD A,[BC]
0478++ 920D 03          		INC BC
0479++ 920E DD 77 0A    		LD [IX+(CHNPRM_TnSlDl-12)],A
0480++ 9211 DD 77 F9    		LD [IX+(CHNPRM_TSlCnt-12)],A
0481++ 9214 0A          		LD A,[BC]
0482++ 9215 03          		INC BC
0483++ 9216 08          		EX AF,AF'
0484++ 9217 0A          		LD A,[BC]
0485++ 9218 03          		INC BC
0486++ 9219 18 E1       		JR SET_STP
0487++ 921B             
0488++ 921B 0A          C_SMPOS: 	LD A,[BC]
0489++ 921C 03          		INC BC
0490++ 921D DD 77 F5    		LD [IX+(CHNPRM_PsInSm-12)],A
0491++ 9220 C9          		RET
0492++ 9221             
0493++ 9221 0A          C_ORPOS: 	LD A,[BC]
0494++ 9222 03          		INC BC
0495++ 9223 DD 77 F4    		LD [IX+(CHNPRM_PsInOr-12)],A
0496++ 9226 C9          		RET
0497++ 9227             
0498++ 9227 0A          C_VIBRT: 	LD A,[BC]
0499++ 9228 03          		INC BC
0500++ 9229 DD 77 FF    		LD [IX+(CHNPRM_OnOffD-12)],A
0501++ 922C DD 77 FE    		LD [IX+(CHNPRM_COnOff-12)],A
0502++ 922F 0A          		LD A,[BC]
0503++ 9230 03          		INC BC
0504++ 9231 DD 77 00    		LD [IX+(CHNPRM_OffOnD-12)],A
0505++ 9234 AF          		XOR A
0506++ 9235 DD 77 F9    		LD [IX+(CHNPRM_TSlCnt-12)],A
0507++ 9238 DD 77 FA    		LD [IX+(CHNPRM_CrTnSl-12)],A
0508++ 923B DD 77 FB    		LD [IX+(CHNPRM_CrTnSl+1-12)],A
0509++ 923E C9          		RET
0510++ 923F             
0511++ 923F 0A          C_ENGLS: 	LD A,[BC]
0512++ 9240 03          		INC BC
0513++ 9241 32 1E F0    		LD [PT3_Env_Del],A
0514++ 9244 32 7D F0    		LD [CurEDel],A
0515++ 9247 0A          		LD A,[BC]
0516++ 9248 03          		INC BC
0517++ 9249 6F          		LD L,A
0518++ 924A 0A          		LD A,[BC]
0519++ 924B 03          		INC BC
0520++ 924C 67          		LD H,A
0521++ 924D 22 1F F0    		LD [PT3_ESldAdd],HL
0522++ 9250 C9          		RET
0523++ 9251             
0524++ 9251 0A          C_DELAY: 	LD A,[BC]
0525++ 9252 03          		INC BC
0526++ 9253 32 1C F0    		LD [PT3_Delay],A
0527++ 9256 C9          		RET
0528++ 9257             	
0529++ 9257 DD 73 08    SETENV: 		LD [IX+(CHNPRM_Env_En-12)],E
0530++ 925A 32 4D F1    		LD [AYREGS+AR_EnvTp],A
0531++ 925D 0A          		LD A,[BC]
0532++ 925E 03          		INC BC
0533++ 925F 67          		LD H,A
0534++ 9260 0A          		LD A,[BC]
0535++ 9261 03          		INC BC
0536++ 9262 6F          		LD L,A
0537++ 9263 22 4E F1    		LD [EnvBase],HL
0538++ 9266 AF          		XOR A
0539++ 9267 DD 77 F4    		LD [IX+(CHNPRM_PsInOr-12)],A
0540++ 926A 32 7D F0    		LD [CurEDel],A
0541++ 926D 67          		LD H,A
0542++ 926E 6F          		LD L,A
0543++ 926F 22 7B F0    		LD [CurESld],HL
0544++ 9272 C9          C_NOP: 		RET
0545++ 9273             
0546++ 9273 87          SETORN: 		ADD A,A
0547++ 9274 5F          		LD E,A
0548++ 9275 16 00       		LD D,0
0549++ 9277 DD 72 F4    		LD [IX+(CHNPRM_PsInOr-12)],D
0550++ 927A 2A 07 F0    		LD HL,[PT3_OrnPtrs]
0551++ 927D 19          		ADD HL,DE
0552++ 927E 5E          		LD E,[HL]
0553++ 927F 23          		INC HL
0554++ 9280 56          		LD D,[HL]
0555++ 9281 2A 01 F0    		LD HL,[PT3_MODADDR]
0556++ 9284 19          		ADD HL,DE
0557++ 9285 DD 75 01    		LD [IX+(CHNPRM_OrnPtr-12)],L
0558++ 9288 DD 74 02    		LD [IX+(CHNPRM_OrnPtr+1-12)],H
0559++ 928B C9          		RET
0560++ 928C             
0561++ 928C             		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
0562++ 928C 72 92       SPCCOMS: 	dw C_NOP
0563++ 928E 08 92       		dw C_GLISS
0564++ 9290 A7 91       		dw C_PORTM
0565++ 9292 1B 92       		dw C_SMPOS
0566++ 9294 21 92       		dw C_ORPOS
0567++ 9296 27 92       		dw C_VIBRT
0568++ 9298 72 92       		dw C_NOP
0569++ 929A 72 92       		dw C_NOP
0570++ 929C 3F 92       		dw C_ENGLS
0571++ 929E 51 92       		dw C_DELAY
0572++ 92A0 72 92       		dw C_NOP
0573++ 92A2 72 92       		dw C_NOP
0574++ 92A4 72 92       		dw C_NOP
0575++ 92A6 72 92       		dw C_NOP
0576++ 92A8 72 92       		dw C_NOP
0577++ 92AA 72 92       		dw C_NOP
0578++ 92AC             
0579++ 92AC AF          CHREGS: 		XOR A
0580++ 92AD 32 4A F1    		LD [AYREGS+AR_AmplC],A
0581++ 92B0 DD CB 15 46 		BIT 0,[IX+CHNPRM_Flags]
0582++ 92B4 E5          		PUSH HL
0583++ 92B5 CA DB 93    		JP Z,.CH_EXIT
0584++ 92B8 ED 73 0B F0 		LD [PT3_CSP],SP
0585++ 92BC DD 6E 0D    		LD L,[IX+CHNPRM_OrnPtr]
0586++ 92BF DD 66 0E    		LD H,[IX+CHNPRM_OrnPtr+1]
0587++ 92C2 F9          		LD SP,HL
0588++ 92C3 D1          		POP DE
0589++ 92C4 67          		LD H,A
0590++ 92C5 DD 7E 00    		LD A,[IX+CHNPRM_PsInOr]
0591++ 92C8 6F          		LD L,A
0592++ 92C9 39          		ADD HL,SP
0593++ 92CA 3C          		INC A
0594++ 92CB BA          		CP D
0595++ 92CC 38 01       		JR C,.CH_ORPS
0596++ 92CE 7B          		LD A,E
0597++ 92CF DD 77 00    .CH_ORPS: 	LD [IX+CHNPRM_PsInOr],A
0598++ 92D2 DD 7E 12    		LD A,[IX+CHNPRM_Note]
0599++ 92D5 86          		ADD A,[HL]
0600++ 92D6 F2 DA 92    		JP P,.CH_NTP
0601++ 92D9 AF          		XOR A
0602++ 92DA FE 60       .CH_NTP: 	CP 96
0603++ 92DC 38 02       		JR C,.CH_NOK
0604++ 92DE 3E 5F       		LD A,95
0605++ 92E0 87          .CH_NOK: 	ADD A,A
0606++ 92E1 08          		EX AF,AF'
0607++ 92E2 DD 6E 0F    		LD L,[IX+CHNPRM_SamPtr]
0608++ 92E5 DD 66 10    		LD H,[IX+CHNPRM_SamPtr+1]
0609++ 92E8 F9          		LD SP,HL
0610++ 92E9 D1          		POP DE
0611++ 92EA 26 00       		LD H,0
0612++ 92EC DD 7E 01    		LD A,[IX+CHNPRM_PsInSm]
0613++ 92EF 47          		LD B,A
0614++ 92F0 87          		ADD A,A
0615++ 92F1 87          		ADD A,A
0616++ 92F2 6F          		LD L,A
0617++ 92F3 39          		ADD HL,SP
0618++ 92F4 F9          		LD SP,HL
0619++ 92F5 78          		LD A,B
0620++ 92F6 3C          		INC A
0621++ 92F7 BA          		CP D
0622++ 92F8 38 01       		JR C,.CH_SMPS
0623++ 92FA 7B          		LD A,E
0624++ 92FB DD 77 01    .CH_SMPS: 	LD [IX+CHNPRM_PsInSm],A
0625++ 92FE C1          		POP BC
0626++ 92FF E1          		POP HL
0627++ 9300 DD 5E 08    		LD E,[IX+CHNPRM_TnAcc]
0628++ 9303 DD 56 09    		LD D,[IX+CHNPRM_TnAcc+1]
0629++ 9306 19          		ADD HL,DE
0630++ 9307 CB 70       		BIT 6,B
0631++ 9309 28 06       		JR Z,.CH_NOAC
0632++ 930B DD 75 08    		LD [IX+CHNPRM_TnAcc],L
0633++ 930E DD 74 09    		LD [IX+CHNPRM_TnAcc+1],H
0634++ 9311 EB          .CH_NOAC: 	EX DE,HL
0635++ 9312 08          		EX AF,AF'
0636++ 9313 6F          		LD L,A
0637++ 9314 26 00       		LD H,0
0638++ 9316 31 80 F0    		LD SP,NT_
0639++ 9319 39          		ADD HL,SP
0640++ 931A F9          		LD SP,HL
0641++ 931B E1          		POP HL
0642++ 931C 19          		ADD HL,DE
0643++ 931D DD 5E 06    		LD E,[IX+CHNPRM_CrTnSl]
0644++ 9320 DD 56 07    		LD D,[IX+CHNPRM_CrTnSl+1]
0645++ 9323 19          		ADD HL,DE
0646++ 9324 ED 7B 0B F0 		LD SP,[PT3_CSP]
0647++ 9328 E3          		EX [SP],HL
0648++ 9329 AF          		XOR A
0649++ 932A DD B6 05    		OR [IX+CHNPRM_TSlCnt]
0650++ 932D 28 3E       		JR Z,.CH_AMP
0651++ 932F DD 35 05    		DEC [IX+CHNPRM_TSlCnt]
0652++ 9332 20 39       		JR NZ,.CH_AMP
0653++ 9334 DD 7E 16    		LD A,[IX+CHNPRM_TnSlDl]
0654++ 9337 DD 77 05    		LD [IX+CHNPRM_TSlCnt],A
0655++ 933A DD 6E 17    		LD L,[IX+CHNPRM_TSlStp]
0656++ 933D DD 66 18    		LD H,[IX+CHNPRM_TSlStp+1]
0657++ 9340 7C          		LD A,H
0658++ 9341 19          		ADD HL,DE
0659++ 9342 DD 75 06    		LD [IX+CHNPRM_CrTnSl],L
0660++ 9345 DD 74 07    		LD [IX+CHNPRM_CrTnSl+1],H
0661++ 9348 DD CB 15 56 		BIT 2,[IX+CHNPRM_Flags]
0662++ 934C 20 1F       		JR NZ,.CH_AMP
0663++ 934E DD 5E 19    		LD E,[IX+CHNPRM_TnDelt]
0664++ 9351 DD 56 1A    		LD D,[IX+CHNPRM_TnDelt+1]
0665++ 9354 A7          		AND A
0666++ 9355 28 01       		JR Z,.CH_STPP
0667++ 9357 EB          		EX DE,HL
0668++ 9358 ED 52       .CH_STPP: 	SBC HL,DE
0669++ 935A FA 6D 93    		JP M,.CH_AMP
0670++ 935D DD 7E 13    		LD A,[IX+CHNPRM_SlToNt]
0671++ 9360 DD 77 12    		LD [IX+CHNPRM_Note],A
0672++ 9363 AF          		XOR A
0673++ 9364 DD 77 05    		LD [IX+CHNPRM_TSlCnt],A
0674++ 9367 DD 77 06    		LD [IX+CHNPRM_CrTnSl],A
0675++ 936A DD 77 07    		LD [IX+CHNPRM_CrTnSl+1],A
0676++ 936D DD 7E 02    .CH_AMP: 	LD A,[IX+CHNPRM_CrAmSl]
0677++ 9370 CB 79       		BIT 7,C
0678++ 9372 28 13       		JR Z,.CH_NOAM
0679++ 9374 CB 71       		BIT 6,C
0680++ 9376 28 07       		JR Z,.CH_AMIN
0681++ 9378 FE 0F       		CP 15
0682++ 937A 28 0B       		JR Z,.CH_NOAM
0683++ 937C 3C          		INC A
0684++ 937D 18 05       		JR .CH_SVAM
0685++ 937F FE F1       .CH_AMIN: 	CP -15
0686++ 9381 28 04       		JR Z,.CH_NOAM
0687++ 9383 3D          		DEC A
0688++ 9384 DD 77 02    .CH_SVAM: 	LD [IX+CHNPRM_CrAmSl],A
0689++ 9387 6F          .CH_NOAM: 	LD L,A
0690++ 9388 78          		LD A,B
0691++ 9389 E6 0F       		AND 15
0692++ 938B 85          		ADD A,L
0693++ 938C F2 90 93    		JP P,.CH_APOS
0694++ 938F AF          		XOR A
0695++ 9390 FE 10       .CH_APOS: 	CP 16
0696++ 9392 38 02       		JR C,.CH_VOL
0697++ 9394 3E 0F       		LD A,15
0698++ 9396 DD B6 1C    .CH_VOL: 	OR [IX+CHNPRM_Volume]
0699++ 9399 6F          		LD L,A
0700++ 939A 26 00       		LD H,0
0701++ 939C 11 40 F1    		LD DE,VT_
0702++ 939F 19          		ADD HL,DE
0703++ 93A0 7E          		LD A,[HL]
0704++ 93A1 CB 41       .CH_ENV: 	BIT 0,C
0705++ 93A3 20 03       		JR NZ,.CH_NOEN
0706++ 93A5 DD B6 14    		OR [IX+CHNPRM_Env_En]
0707++ 93A8 32 4A F1    .CH_NOEN: 	LD [AYREGS+AR_AmplC],A
0708++ 93AB CB 78       		BIT 7,B
0709++ 93AD 79          		LD A,C
0710++ 93AE 28 19       		JR Z,.NO_ENSL
0711++ 93B0 17          		RLA
0712++ 93B1 17          		RLA
0713++ 93B2 CB 2F       		SRA A
0714++ 93B4 CB 2F       		SRA A
0715++ 93B6 CB 2F       		SRA A
0716++ 93B8 DD 86 04    		ADD A,[IX+CHNPRM_CrEnSl] ;SEE COMMENT BELOW
0717++ 93BB CB 68       		BIT 5,B
0718++ 93BD 28 03       		JR Z,.NO_ENAC
0719++ 93BF DD 77 04    		LD [IX+CHNPRM_CrEnSl],A
0720++ 93C2 21 1D F0    .NO_ENAC: 	LD HL,PT3_AddToEn
0721++ 93C5 86          		ADD A,[HL] ;BUG IN PT3 - NEED WORD HERE.
0722++ 93C6             			   ;FIX IT IN NEXT VERSION?
0723++ 93C6 77          		LD [HL],A
0724++ 93C7 18 0E       		JR .CH_MIX
0725++ 93C9 1F          .NO_ENSL: 	RRA
0726++ 93CA DD 86 03    		ADD A,[IX+CHNPRM_CrNsSl]
0727++ 93CD 32 7F F0    		LD [AddToNs],A
0728++ 93D0 CB 68       		BIT 5,B
0729++ 93D2 28 03       		JR Z,.CH_MIX
0730++ 93D4 DD 77 03    		LD [IX+CHNPRM_CrNsSl],A
0731++ 93D7 78          .CH_MIX: 	LD A,B
0732++ 93D8 1F          		RRA
0733++ 93D9 E6 48       		AND $48
0734++ 93DB 21 47 F1    .CH_EXIT: 	LD HL,AYREGS+AR_Mixer
0735++ 93DE B6          		OR [HL]
0736++ 93DF 0F          		RRCA
0737++ 93E0 77          		LD [HL],A
0738++ 93E1 E1          		POP HL
0739++ 93E2 AF          		XOR A
0740++ 93E3 DD B6 0A    		OR [IX+CHNPRM_COnOff]
0741++ 93E6 C8          		RET Z
0742++ 93E7 DD 35 0A    		DEC [IX+CHNPRM_COnOff]
0743++ 93EA C0          		RET NZ
0744++ 93EB DD AE 15    		XOR [IX+CHNPRM_Flags]
0745++ 93EE DD 77 15    		LD [IX+CHNPRM_Flags],A
0746++ 93F1 1F          		RRA
0747++ 93F2 DD 7E 0B    		LD A,[IX+CHNPRM_OnOffD]
0748++ 93F5 38 03       		JR C,.CH_ONDL
0749++ 93F7 DD 7E 0C    		LD A,[IX+CHNPRM_OffOnD]
0750++ 93FA DD 77 0A    .CH_ONDL: 	LD [IX+CHNPRM_COnOff],A
0751++ 93FD C9          		RET
0752++ 93FE             
0753++ 93FE AF          PT3_PLAY: 	XOR A
0754++ 93FF 32 1D F0    		LD [PT3_AddToEn],A
0755++ 9402 32 47 F1    		LD [AYREGS+AR_Mixer],A
0756++ 9405 3D          		DEC A
0757++ 9406 32 4D F1    		LD [AYREGS+AR_EnvTp],A
0758++ 9409 21 7A F0    		LD HL,DelyCnt
0759++ 940C 35          		DEC [HL]
0760++ 940D C2 94 94    		JP NZ,.PL2
0761++ 9410 21 3E F0    		LD HL,ChanA+CHNPRM_NtSkCn
0762++ 9413 35          		DEC [HL]
0763++ 9414 20 4E       		JR NZ,.PL1B
0764++ 9416 ED 4B 12 F0 		LD BC,[PT3_AdInPtA]
0765++ 941A 0A          		LD A,[BC]
0766++ 941B A7          		AND A
0767++ 941C 20 3B       		JR NZ,.PL1A
0768++ 941E 57          		LD D,A
0769++ 941F 32 7E F0    		LD [Ns_Base],A
0770++ 9422 2A 03 F0    		LD HL,[PT3_CrPsPtr]
0771++ 9425 23          		INC HL
0772++ 9426 7E          		LD A,[HL]
0773++ 9427 3C          		INC A
0774++ 9428 20 08       		JR NZ,.PLNLP
0775++ 942A CD 94 8F    		CALL CHECKLP
0776++ 942D 2A 18 F0    		LD HL,[PT3_LPosPtr]
0777++ 9430 7E          		LD A,[HL]
0778++ 9431 3C          		INC A
0779++ 9432 22 03 F0    .PLNLP: 	LD [PT3_CrPsPtr],HL
0780++ 9435 3D          		DEC A
0781++ 9436 87          		ADD A,A
0782++ 9437 5F          		LD E,A
0783++ 9438 CB 12       		RL D
0784++ 943A 2A 1A F0    		LD HL,[PT3_PatsPtr]
0785++ 943D 19          		ADD HL,DE
0786++ 943E ED 5B 01 F0 		LD DE,[PT3_MODADDR]
0787++ 9442 ED 73 0D F0 		LD [PT3_PSP],SP
0788++ 9446 F9          		LD SP,HL
0789++ 9447 E1          		POP HL
0790++ 9448 19          		ADD HL,DE
0791++ 9449 44          		LD B,H
0792++ 944A 4D          		LD C,L
0793++ 944B E1          		POP HL
0794++ 944C 19          		ADD HL,DE
0795++ 944D 22 14 F0    		LD [PT3_AdInPtB],HL
0796++ 9450 E1          		POP HL
0797++ 9451 19          		ADD HL,DE
0798++ 9452 22 16 F0    		LD [PT3_AdInPtC],HL
0799++ 9455 ED 7B 0D F0 		LD SP,[PT3_PSP]
0800++ 9459             
0801++ 9459 DD 21 2F F0 .PL1A: 		LD IX,ChanA+12
0802++ 945D CD 3C 91    		CALL PTDECOD
0803++ 9460 ED 43 12 F0 		LD [PT3_AdInPtA],BC
0804++ 9464             
0805++ 9464 21 5B F0    .PL1B: 		LD HL,ChanB+CHNPRM_NtSkCn
0806++ 9467 35          		DEC [HL]
0807++ 9468 20 0F       		JR NZ,.PL1C
0808++ 946A DD 21 4C F0 		LD IX,ChanB+12
0809++ 946E ED 4B 14 F0 		LD BC,[PT3_AdInPtB]
0810++ 9472 CD 3C 91    		CALL PTDECOD
0811++ 9475 ED 43 14 F0 		LD [PT3_AdInPtB],BC
0812++ 9479             
0813++ 9479 21 78 F0    .PL1C: 		LD HL,ChanC+CHNPRM_NtSkCn
0814++ 947C 35          		DEC [HL]
0815++ 947D 20 0F       		JR NZ,.PL1D
0816++ 947F DD 21 69 F0 		LD IX,ChanC+12
0817++ 9483 ED 4B 16 F0 		LD BC,[PT3_AdInPtC]
0818++ 9487 CD 3C 91    		CALL PTDECOD
0819++ 948A ED 43 16 F0 		LD [PT3_AdInPtC],BC
0820++ 948E             
0821++ 948E 3A 1C F0    .PL1D: 		LD A,[PT3_Delay]
0822++ 9491 32 7A F0    		LD [DelyCnt],A
0823++ 9494             
0824++ 9494 DD 21 23 F0 .PL2: 		LD IX,ChanA
0825++ 9498 2A 40 F1    		LD HL,[AYREGS+AR_TonA]
0826++ 949B CD AC 92    		CALL CHREGS
0827++ 949E 22 40 F1    		LD [AYREGS+AR_TonA],HL
0828++ 94A1 3A 4A F1    		LD A,[AYREGS+AR_AmplC]
0829++ 94A4 32 48 F1    		LD [AYREGS+AR_AmplA],A
0830++ 94A7 DD 21 40 F0 		LD IX,ChanB
0831++ 94AB 2A 42 F1    		LD HL,[AYREGS+AR_TonB]
0832++ 94AE CD AC 92    		CALL CHREGS
0833++ 94B1 22 42 F1    		LD [AYREGS+AR_TonB],HL
0834++ 94B4 3A 4A F1    		LD A,[AYREGS+AR_AmplC]
0835++ 94B7 32 49 F1    		LD [AYREGS+AR_AmplB],A
0836++ 94BA DD 21 5D F0 		LD IX,ChanC
0837++ 94BE 2A 44 F1    		LD HL,[AYREGS+AR_TonC]
0838++ 94C1 CD AC 92    		CALL CHREGS
0839++ 94C4 22 44 F1    		LD [AYREGS+AR_TonC],HL
0840++ 94C7             
0841++ 94C7 2A 7E F0    		LD HL,[Ns_Base_AddToNs]
0842++ 94CA 7C          		LD A,H
0843++ 94CB 85          		ADD A,L
0844++ 94CC 32 46 F1    		LD [AYREGS+AR_Noise],A
0845++ 94CF             
0846++ 94CF 3A 1D F0    		LD A,[PT3_AddToEn]
0847++ 94D2 5F          		LD E,A
0848++ 94D3 87          		ADD A,A
0849++ 94D4 9F          		SBC A,A
0850++ 94D5 57          		LD D,A
0851++ 94D6 2A 4E F1    		LD HL,[EnvBase]
0852++ 94D9 19          		ADD HL,DE
0853++ 94DA ED 5B 7B F0 		LD DE,[CurESld]
0854++ 94DE 19          		ADD HL,DE
0855++ 94DF 22 4B F1    		LD [AYREGS+AR_Env],HL
0856++ 94E2             
0857++ 94E2 AF          		XOR A
0858++ 94E3 21 7D F0    		LD HL,CurEDel
0859++ 94E6 B6          		OR [HL]
0860++ 94E7 C8          		RET Z
0861++ 94E8 35          		DEC [HL]
0862++ 94E9 C0          		RET NZ
0863++ 94EA 3A 1E F0    		LD A,[PT3_Env_Del]
0864++ 94ED 77          		LD [HL],A
0865++ 94EE 2A 1F F0    		LD HL,[PT3_ESldAdd]
0866++ 94F1 19          		ADD HL,DE
0867++ 94F2 22 7B F0    		LD [CurESld],HL
0868++ 94F5 C9          		RET
0869++ 94F6             
0870++ 94F6 AF          PT3_ROUT: 	XOR A
0871++ 94F7             	
0872++ 94F7             ROUT_A0: 	; --- FIXES BITS 6 AND 7 OF MIXER ---
0873++ 94F7 21 47 F1    		LD	HL,AYREGS+AR_Mixer
0874++ 94FA CB FE       		set	7,[hl]
0875++ 94FC CB B6       		res	6,[hl]
0876++ 94FE             
0877++ 94FE 0E A0       		LD C,$A0
0878++ 9500 21 40 F1    		LD HL,AYREGS
0879++ 9503 ED 79       .LOUT: 		OUT [C],A
0880++ 9505 0C          		INC C
0881++ 9506 ED A3       		OUTI 
0882++ 9508 0D          		DEC C
0883++ 9509 3C          		INC A
0884++ 950A FE 0D       		CP 13
0885++ 950C 20 F5       		JR NZ,.LOUT
0886++ 950E ED 79       		OUT [C],A
0887++ 9510 7E          		LD A,[HL]
0888++ 9511 A7          		AND A
0889++ 9512 F8          		RET M
0890++ 9513 0C          		INC C
0891++ 9514 ED 79       		OUT [C],A
0892++ 9516 C9          		RET
0893++ 9517             
0894++ 9517 64          NT_DATA: 	db (T_NEW_0-T1_)*2
0895++ 9518 2A          		db TCNEW_0-T_
0896++ 9519 65          		db (T_OLD_0-T1_)*2+1
0897++ 951A 00          		db TCOLD_0-T_
0898++ 951B 01          		db (T_NEW_1-T1_)*2+1
0899++ 951C 0C          		db TCNEW_1-T_
0900++ 951D 01          		db (T_OLD_1-T1_)*2+1
0901++ 951E 0C          		db TCOLD_1-T_
0902++ 951F 94          		db (T_NEW_2-T1_)*2
0903++ 9520 35          		db TCNEW_2-T_
0904++ 9521 30          		db (T_OLD_2-T1_)*2
0905++ 9522 0E          		db TCOLD_2-T_
0906++ 9523 60          		db (T_NEW_3-T1_)*2
0907++ 9524 20          		db TCNEW_3-T_
0908++ 9525 60          		db (T_OLD_3-T1_)*2
0909++ 9526 21          		db TCOLD_3-T_
0910++ 9527             
0911++ 9527             T_: 
0912++ 9527             
0913++ 9527             TCOLD_0: 	db $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
0913++ 9527 0105090B0D0F1315
0914++ 952F 19 25 3D 00 		db $18+1,$24+1,$3C+1,0
0915++ 9533             TCNEW_1: 	
0916++ 9533 5D 00       TCOLD_1: 	db $5C+1,0
0917++ 9535             TCOLD_2: 	db $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
0917++ 9535 31374D535F71828C9C
0918++ 953E             		db $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
0918++ 953E 9EA0A6A8AAACAEAE00
0919++ 9547 57          TCNEW_3: 	db $56+1
0920++ 9548             TCOLD_3: 	db $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
0920++ 9548 1F2325292D2F33BF00
0921++ 9551             TCNEW_0: 	db $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
0921++ 9551 1D2123272B2D3155
0922++ 9559 BD BF 00    		db $BC+1,$BE+1,0
0923++ 955C             TCNEW_2: 	db $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
0923++ 955C 1B2125292B3B4D5F
0924++ 9564 BB BD BF    		db $BA+1,$BC+1,$BE+1
0925++ 9567             
0926++ 9567 00 01 00 90 EMPTYSAMORN:  	db 0,1,0,$90 ;delete $90 if you don't need default sample
0927++ 956B             
0928++ 956B             T_PACK: 		; First 12 values of tone tables (packed)
0929++ 956B 0D          		db ($06EC*2)/256
0930++ 956C D8          		db #d8
0931++ 956D 69          		db $0755-$06EC
0932++ 956E 70          		db $07C5-$0755
0933++ 956F 76          		db $083B-$07C5
0934++ 9570 7D          		db $08B8-$083B
0935++ 9571 85          		db $093D-$08B8
0936++ 9572 8D          		db $09CA-$093D
0937++ 9573 95          		db $0A5F-$09CA
0938++ 9574 9D          		db $0AFC-$0A5F
0939++ 9575 A8          		db $0BA4-$0AFC
0940++ 9576 B1          		db $0C55-$0BA4
0941++ 9577 BB          		db $0D10-$0C55
0942++ 9578 0C          		db ($066D*2)/256
0943++ 9579 DA          		db #da
0944++ 957A 62          		db $06CF-$066D
0945++ 957B 68          		db $0737-$06CF
0946++ 957C 6D          		db $07A4-$0737
0947++ 957D 75          		db $0819-$07A4
0948++ 957E 7B          		db $0894-$0819
0949++ 957F 83          		db $0917-$0894
0950++ 9580 8A          		db $09A1-$0917
0951++ 9581 92          		db $0A33-$09A1
0952++ 9582 9C          		db $0ACF-$0A33
0953++ 9583 A4          		db $0B73-$0ACF
0954++ 9584 AF          		db $0C22-$0B73
0955++ 9585 B8          		db $0CDA-$0C22
0956++ 9586 0E          		db ($0704*2)/256
0957++ 9587 08          		db #08
0958++ 9588 6A          		db $076E-$0704
0959++ 9589 72          		db $07E0-$076E
0960++ 958A 78          		db $0858-$07E0
0961++ 958B 7E          		db $08D6-$0858
0962++ 958C 86          		db $095C-$08D6
0963++ 958D 90          		db $09EC-$095C
0964++ 958E 96          		db $0A82-$09EC
0965++ 958F A0          		db $0B22-$0A82
0966++ 9590 AA          		db $0BCC-$0B22
0967++ 9591 B4          		db $0C80-$0BCC
0968++ 9592 BE          		db $0D3E-$0C80
0969++ 9593 0F          		db ($07E0*2)/256
0970++ 9594 C0          		db #c0
0971++ 9595 78          		db $0858-$07E0
0972++ 9596 88          		db $08E0-$0858
0973++ 9597 80          		db $0960-$08E0
0974++ 9598 90          		db $09F0-$0960
0975++ 9599 98          		db $0A88-$09F0
0976++ 959A A0          		db $0B28-$0A88
0977++ 959B B0          		db $0BD8-$0B28
0978++ 959C A8          		db $0C80-$0BD8
0979++ 959D E0          		db $0D60-$0C80
0980++ 959E B0          		db $0E10-$0D60
0981++ 959F E8          		db $0EF8-$0E10
0982++ 95A0             
0983++ 95A0             
0984++ 95A0             
0985++ 95A0             
0986++ 95A0             
0987++ 95A0             
0988++ 95A0             
0989++ 95A0             
0990++ 95A0             
0991++ 95A0             
0992++ 95A0             
0993++ 95A0             
0994++ 95A0             
0995++ 95A0             	;Variables del replayer... las coloco desde aqui.
0996++ 95A0             	;mirar que hace la directiva MAP del SJASM
0997++ 95A0             	map		#f000
0998++ 95A0             
0999++ 95A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER
1000++ 95A0             PT3_SETUP: 		#1	;set bit0 to 1, if you want to play without looping
1001++ 95A0             					;bit7 is set each time, when loop point is passed
1002++ 95A0             PT3_MODADDR: 	#2
1003++ 95A0             PT3_CrPsPtr: 		#2
1004++ 95A0             PT3_SAMPTRS: 		#2
1005++ 95A0             PT3_OrnPtrs: 		#2
1006++ 95A0             PT3_PDSP: 		#2
1007++ 95A0             PT3_CSP: 		#2 
1008++ 95A0             PT3_PSP: 		#2
1009++ 95A0             PT3_PrNote: 		#1
1010++ 95A0             PT3_PrSlide: 		#2
1011++ 95A0             PT3_AdInPtA: 		#2
1012++ 95A0             PT3_AdInPtB: 		#2
1013++ 95A0             PT3_AdInPtC: 		#2
1014++ 95A0             PT3_LPosPtr: 		#2
1015++ 95A0             PT3_PatsPtr: 		#2
1016++ 95A0             PT3_Delay: 		#1
1017++ 95A0             PT3_AddToEn: 		#1
1018++ 95A0             PT3_Env_Del: 		#1
1019++ 95A0             PT3_ESldAdd: 		#2
1020++ 95A0             PT3_NTL3: 		#2	; AND A / NOP (note table creator)
1021++ 95A0             
1022++ 95A0             VARS: 			#0
1023++ 95A0             
1024++ 95A0             ChanA: 			#29			;CHNPRM_Size
1025++ 95A0             ChanB: 			#29			;CHNPRM_Size
1026++ 95A0             ChanC: 			#29			;CHNPRM_Size
1027++ 95A0             
1028++ 95A0             ;GlobalVars
1029++ 95A0             DelyCnt: 		#1
1030++ 95A0             CurESld: 		#2
1031++ 95A0             CurEDel: 		#1
1032++ 95A0             Ns_Base_AddToNs: 	#0
1033++ 95A0             Ns_Base: 		#1
1034++ 95A0             AddToNs: 		#1
1035++ 95A0             
1036++ 95A0             NT_: 			#192	; Puntero a/tabla de frecuencias
1037++ 95A0             
1038++ 95A0             AYREGS: 			#0
1039++ 95A0             VT_: 			#14
1040++ 95A0             EnvBase: 		#2
1041++ 95A0             VAR0END: 		#0
1042++ 95A0             
1043++ 95A0             T1_: 			#0		
1044++ 95A0             T_NEW_1: 		#0
1045++ 95A0             T_OLD_1: 		#24
1046++ 95A0             T_OLD_2: 		#24
1047++ 95A0             T_NEW_3: 		#0
1048++ 95A0             T_OLD_3: 		#2
1049++ 95A0             T_OLD_0: 		#0
1050++ 95A0             T_NEW_0: 		#24
1051++ 95A0             T_NEW_2: 		#166
1052++ 95A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PT3 REPLAYER END
0089+  95A0             ingame: 
0090+  95A0             	incbin "./src/musicdisc.pt3"			
0091+  97DD             menu: 
0092+  97DD             	incbin "./src/menu.pt3"			
0093+  98E7             
0094+  98E7             
0095+  98E7             
0096+  98E7             
0281   98E7             
0282   98E7             FINAL: 
