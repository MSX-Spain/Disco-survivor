Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2023.10.29 - 09:57:04]

src/main.asm
Errors: 0

       1   00:0000                          output "main.bin"
       2   00:C000                      	include "src/vars_msxBios.asm"   
       1.  00:C000                      
       2.  00:C000                      ;http://map.grauw.nl/resources/msxbios.php
       3.  00:C000                      ; use RST assembler mnemonic to call
       4.  00:C000  (00:0000)           CHKRAM equ 0x00 ; RST 0x00 > Check RAM and sets slot for command area.
       5.  00:C000  (00:0008)           SYNCHR equ 0x08 ; RST	0x08 > Checks if then current character pointed by HL is one desired.
       6.  00:C000  (00:0010)           CHRGTR equ 0x10 ; RST	0x10 > Gets the next character (or token) of the Basic-text
       7.  00:C000  (00:0018)           OUTDO  equ 0x18 ; RST	0x18 > Output to current outputchannel (printer, diskfile, etc.)
       8.  00:C000  (00:0020)           DCOMPR equ 0x20 ; RST	0x20 > Compares HL with DE
       9.  00:C000  (00:0028)           GETYPR equ 0x28 ; RST	0x28 > Returns Type of DAC
      10.  00:C000  (00:0030)           CALLF  equ 0x30 ; RST	0x30 > Executes an interslot call
      11.  00:C000  (00:0038)           KEYINT equ 0x38 ; RST	0x38 > Executes the timer interrupt process routine
      12.  00:C000                      
      13.  00:C000                      ; use CALL assembler mnemonic
      14.  00:C000  (00:000C)           RDSLT  equ 0x000C ; Reads the value of an address in another slot
      15.  00:C000  (00:0014)           WRSLT  equ 0x0014 ; Writes a value to an address in another slot
      16.  00:C000  (00:001C)           CALSLT equ 0x001C ; Executes inter-slot call
      17.  00:C000  (00:0024)           ENASLT equ 0x0024 ; Switches indicated slot at indicated page on perpetual
      18.  00:C000                      
      19.  00:C000                      ; Initialization-routines
      20.  00:C000  (00:003B)           INITIO equ 0x003B ; Initialises the device
      21.  00:C000  (00:003E)           INIFNK equ 0x003E ; Initialises the contents of the function keys
      22.  00:C000                      
      23.  00:C000                      ; VDP routines
      24.  00:C000  (00:0041)           DISSCR equ 0x0041 ; inhibits the screen display
      25.  00:C000  (00:0044)           ENASCR equ 0x0044 ; displays the screen
      26.  00:C000  (00:0047)           WRTVDP equ 0x0047 ; write data in the VDP-register
      27.  00:C000  (00:004A)           RDVRM  equ 0x004A ; Reads the content of VRAM
      28.  00:C000  (00:004D)           WRTVRM equ 0x004D ; Writes data in VRAM
      29.  00:C000  (00:0050)           SETRD  equ 0x0050 ; Enable VDP to read
      30.  00:C000  (00:0053)           SETWRT equ 0x0053 ; Enable VDP to write
      31.  00:C000  (00:0056)           FILVRM equ 0x0056 ; fill VRAM with value
      32.  00:C000  (00:0059)           LDIRMV equ 0x0059 ; Block transfer to memory from VRAM
      33.  00:C000  (00:005C)           LDIRVM equ 0x005C ; Block transfer to VRAM from memory
      34.  00:C000  (00:005F)           CHGMOD equ 0x005F ; Switches to given screenmode
      35.  00:C000  (00:0062)           CHGCLR equ 0x0062 ; Changes the screencolors
      36.  00:C000  (00:0069)           CLRSPR equ 0x0069 ; Initialises all sprites
      37.  00:C000  (00:006C)           INITXT equ 0x006C ; Switches to SCREEN 0 (text screen with 40 * 24 characters)
      38.  00:C000  (00:006F)           INIT32 equ 0x006F ; Switches to SCREEN 1 (text screen with 32*24 characters)
      39.  00:C000  (00:0072)           INIGRP equ 0x0072 ; Switches to SCREEN 2 (high resolution screen with 256*192 pixels)
      40.  00:C000  (00:0075)           INIMLT equ 0x0075 ; Switches to SCREEN 3 (multi-color screen 64*48 pixels)
      41.  00:C000  (00:0078)           SETTXT equ 0x0078 ; Switches to VDP in SCREEN 0 mode
      42.  00:C000  (00:007B)           SETT32 equ 0x007B ; Switches VDP in SCREEN mode 1
      43.  00:C000  (00:007E)           SETGRP equ 0x007E ; Switches VDP to SCREEN 2 mode
      44.  00:C000  (00:0081)           SETMLT equ 0x0081 ; Switches VDP to SCREEN 3 mode
      45.  00:C000  (00:0084)           CALPAT equ 0x0084 ; Returns the address of the sprite pattern table
      46.  00:C000  (00:0087)           CALATR equ 0x0087 ; Returns the address of the sprite attribute table
      47.  00:C000  (00:008A)           GSPSIZ equ 0x008A ; Returns current sprite size
      48.  00:C000  (00:008D)           GRPPRT equ 0x008D ; Displays a character on the graphic screen
      49.  00:C000                              
      50.  00:C000                      ; PSG routines
      51.  00:C000  (00:0090)           GICINI equ 0x0090 ; Initialises PSG and sets initial value for the PLAY statement
      52.  00:C000  (00:0093)           WRTPSG equ 0x0093 ; Writes data to PSG-register
      53.  00:C000                      ;Input    : A  - PSG register number
      54.  00:C000                      ;           E  - Data write
      55.  00:C000  (00:0096)           RDPSG  equ 0x0096 ; Reads value from PSG-register
      56.  00:C000  (00:0099)           STRTMS equ 0x0099 ; Tests whether the PLAY statement is being executed as a background task. If not, begins to execute the PLAY statement  */
      57.  00:C000                      
      58.  00:C000                      ; Console routines, rutinas de consola
      59.  00:C000  (00:009C)           CHSNS  equ 0x009C ; Tests the status of the keyboard buffer
      60.  00:C000  (00:009F)           CHGET  equ 0x009F ; One character input (waiting)
      61.  00:C000  (00:00A2)           CHPUT  equ 0x00A2 ; Displays one character
      62.  00:C000  (00:00A5)           LPTOUT equ 0x00A5 ; Sends one character to printer
      63.  00:C000  (00:00A8)           LPTSTT equ 0x00A8 ; Tests printer status
      64.  00:C000  (00:00AB)           CNVCHR equ 0x00AB ; tests for the graphic header and transforms the code
      65.  00:C000  (00:00AE)           PINLIN equ 0x00AE ; Stores in the specified buffer the character codes input until the return key or STOP key is pressed     */
      66.  00:C000  (00:00B1)           INLIN  equ 0x00B1 ; Same as PINLIN except that AUGFLG (#F6AA) is set
      67.  00:C000  (00:00B4)           QINLIN equ 0x00B4 ; Prints a questionmark andone space
      68.  00:C000  (00:00B7)           BREAKX equ 0x00B7 ; Tests status of CTRL-STOP 
      69.  00:C000  (00:00BA)           ISCNTC equ 0x00BA ; Tests status of SHIFT-STOP 
      70.  00:C000  (00:00BD)           CKCNTC equ 0x00BD ; Same as ISCNTC. used in Basic
      71.  00:C000  (00:00C0)           BEEP   equ 0x00C0 ; generates beep
      72.  00:C000  (00:00C3)           BCLS   equ 0x00C3 ; Clears the screen
      73.  00:C000  (00:00C6)           POSIT  equ 0x00C6 ; Places the cursor at the specified location
      74.  00:C000  (00:00C9)           FNKSB  equ 0x00C9 ; Tests whether the function key display is active (FNKFLG)If so, displays them, otherwise erase them */
      75.  00:C000  (00:00CC)           ERAFNK equ 0x00CC ; Erase functionkey display
      76.  00:C000  (00:00CF)           DSPFNK equ 0x00CF ; Displays the function keys
      77.  00:C000  (00:00D2)           TOTEXT equ 0x00D2 ; Forces the screen to be in the text mode
      78.  00:C000                      
      79.  00:C000                      ; Controller routines                      
      80.  00:C000  (00:00D5)           GTSTCK equ 0x00D5 ; Returns the joystick status
      81.  00:C000  (00:00D8)           GTTRIG equ 0x00D8 ; Returns current trigger status
      82.  00:C000  (00:00DB)           GTPAD  equ 0x00DB ; Returns current touch pad status
      83.  00:C000  (00:00DE)           GTPDL  equ 0x00DE ; Returns currenct value of paddle
      84.  00:C000                      
      85.  00:C000                      ; Tape device routines                      
      86.  00:C000  (00:00E1)           TAPION equ 0x00E1 ; Reads the header block after turning the cassette motor on
      87.  00:C000  (00:00E4)           TAPIN  equ 0x00E4 ; Read data from the tape
      88.  00:C000  (00:00E7)           TAPIOF equ 0x00E7 ; Stops reading from the tape
      89.  00:C000  (00:00EA)           TAPOON equ 0x00EA ; Turns on the cassette motor and writes the header
      90.  00:C000  (00:00ED)           TAPOUT equ 0x00ED ; Writes data on the tape
      91.  00:C000  (00:00F0)           TAPOOF equ 0x00F0 ; Stops writing on the tape
      92.  00:C000  (00:00F3)           STMOTR equ 0x00F3 ; Sets the cassette motor action
      93.  00:C000                      
      94.  00:C000                      ; Queue routines                      
      95.  00:C000  (00:00F6)           LFTQ equ 0x00F6 ; Gives number of bytes in queue
      96.  00:C000  (00:00F9)           PUTQ equ 0x00F9 ; Put byte in queue
      97.  00:C000                      
      98.  00:C000                      ; Graphic routines
      99.  00:C000                      ;More info (MSX Assembly Page): http:;map.grauw.nl/resources/msxbios.php                      
     100.  00:C000  (00:00FC)           RIGHTC equ 0x00FC ; Shifts screenpixel to the right
     101.  00:C000  (00:00FF)           LEFTC  equ 0x00FF ; Shifts screenpixel to the left
     102.  00:C000  (00:0102)           UPC    equ 0x0102 ; Shifts screenpixel up
     103.  00:C000  (00:0105)           TUPC   equ 0x0105 ; Tests whether UPC is possible, if possible, execute UPC
     104.  00:C000  (00:0108)           DOWNC  equ 0x0108 ; Shifts screenpixel down
     105.  00:C000  (00:010B)           TDOWNC equ 0x010B ; Tests whether DOWNC is possible, if possible, execute DOWNC
     106.  00:C000  (00:010E)           SCALXY equ 0x010E ; Scales X and Y coordinates
     107.  00:C000  (00:0111)           MAPXY  equ 0x0111 ; Places cursor at current cursor address
     108.  00:C000  (00:0114)           FETCHC equ 0x0114 ; Gets current cursor addresses mask pattern
     109.  00:C000  (00:0117)           STOREC equ 0x0117 ; Record current cursor addresses mask pattern
     110.  00:C000  (00:011A)           SETATR equ 0x011A ; Set attribute byte
     111.  00:C000  (00:011E)           READC  equ 0x011E ; Reads attribute byte of current screenpixel
     112.  00:C000  (00:0120)           SETC   equ 0x0120 ; Returns currenct screenpixel of specificed attribute byte
     113.  00:C000  (00:0123)           NSETCX equ 0x0123 ; Set horizontal screenpixels
     114.  00:C000  (00:0126)           GTASPC equ 0x0126 ; Gets screen relations
     115.  00:C000  (00:0129)           PNTINI equ 0x0129 ; Initalises the PAINT instruction
     116.  00:C000  (00:012C)           SCANR  equ 0x012C ; Scans screenpixels to the right
     117.  00:C000  (00:012F)           SCANL  equ 0x012F ; Scans screenpixels to the left
     118.  00:C000                      
     119.  00:C000                      ; Graphic routines MSX2 
     120.  00:C000                      ;More info (MSX Assembly Page): http:;map.grauw.nl/resources/msxbios.php#msx2bios
     121.  00:C000  (00:0165)           CHKNEW equ 0x0165 ;Tests screen mode > C-flag set if screenmode = 5, 6, 7 or 8
     122.  00:C000  (00:016B)           BIGFIL equ 0x016B ;fill VRAM with value (total VRAM can be reached) HL address, BC length, A data
     123.  00:C000  (00:016E)           NSETRD equ 0x016E ;Enable VDP to read.(with full 16 bits VRAM-address)
     124.  00:C000  (00:0171)           NSTWRT equ 0x0171 ;Enable VDP to write.(with full 16 bits VRAM-address) 
     125.  00:C000  (00:0174)           NRDVRM equ 0x0174 ;Reads VRAM like in RDVRM.(with full 16 bits VRAM-address)
     126.  00:C000  (00:0177)           NWRVRM equ 0x0177 ;Writes to VRAM like in WRTVRM.(with full 16 bits VRAM-address)
     127.  00:C000                      
     128.  00:C000                                           
     129.  00:C000                      ; Misc routines
     130.  00:C000  (00:0132)           CHGCAP equ 0x0132 ; Alternates the CAP lamp status
     131.  00:C000  (00:0135)           CHGSND equ 0x0135 ; Alternates the 1-bit sound port status
     132.  00:C000  (00:0138)           RSLREG equ 0x0138 ; Reads the primary slot register
     133.  00:C000  (00:013B)           WSLREG equ 0x013B ; Writes value to the primary slot register
     134.  00:C000  (00:013E)           RDVDP  equ 0x013E ; Reads VDP status register
     135.  00:C000  (00:0141)           SNSMAT equ 0x0141 ; Returns the value of the specified line from the keyboard matrix
     136.  00:C000                      ; 0   1          2           3           4           5           6           7           8       9       10
     137.  00:C000                      ;0    1          2                      4           5           6
     138.  00:C000                      ;1   ; fin grabr ' grabar                                                    Ñ
     139.  00:C000                      ;2                                      \grabar2  DEADfingrabar2 A           B
     140.  00:C000                      ;3 C                        F           G           H
     141.  00:C000                      ;4                          N
     142.  00:C000                      ;5 S                        V                       X                       Z
     143.  00:C000                      ;6SHIFtONTROL    GRAPH      CAPS        CODE
     144.  00:C000                      ;7              ESCAPE                              BS                      RET
     145.  00:C000                      ;8                                               Cursor ^    Cursor v
     146.  00:C000  (00:0144)           PHYDIO equ 0x0144 ; Executes I/O for mass-storage media like diskettes
     147.  00:C000  (00:0147)           FORMAT equ 0x0147 ; Initialises mass-storage media like formatting of diskettes
     148.  00:C000  (00:014A)           ISFLIO equ 0x014A ; Tests if I/O to device is taking place
     149.  00:C000  (00:014E)           OUTDLP equ 0x014E ; Printer output
     150.  00:C000  (00:0150)           GETVCP equ 0x0150 ; Returns pointer to play queue
     151.  00:C000  (00:0153)           GETVC2 equ 0x0153 ; Returns pointer to variable in queue number VOICEN (byte op #FB38)
     152.  00:C000  (00:0156)           KILBUF equ 0x0156 ; Clear keyboard buffer
     153.  00:C000  (00:0159)           CALBAS equ 0x0159 ; Executes inter-slot call to the routine in BASIC interpreter
     154.  00:C000                              
       3   00:C000  FE                      db   0FEh               ; ID archivo binario, siempre hay que poner el mismo 0FEh
       4   00:C001  00 C0                   dw   INICIO             ; dirección de inicio
       5   00:C003  1D C0                   dw   FINAL - 1          ; dirección final
       6   00:C005  00 C0                   dw   MAIN               ; dircción del programa de ejecución (para cuando pongas r en bload"nombre_programa", r)
       7   00:C007                          
       8   00:C007                           
       9   00:C007                       
      10   00:C007                          org #c000              ; org se utiliza para decirle al z80 en que posición de memoria empieza nuestro programa (es la 33280 en decimal), en hezadecimal sería #8200
      11   00:C000                              
      12   00:C000                      INICIO:
      13   00:C000                      
      14   00:C000                      MAIN:
      15   00:C000  CD 07 C0            	call mensaje
      16   00:C003  CD 1C C0            	call bucle
      17   00:C006  C9                  	ret
      18   00:C007                      
      19   00:C007                      mensaje:
      20   00:C007  3E 68               	ld a,'h'
      21   00:C009  CD A2 00            	call CHPUT 
      22   00:C00C  3E 6F               	ld a,'o'
      23   00:C00E  CD A2 00            	call CHPUT 
      24   00:C011  3E 6C               	ld a,'l'
      25   00:C013  CD A2 00            	call CHPUT 
      26   00:C016  3E 61               	ld a,'a'
      27   00:C018  CD A2 00            	call CHPUT 
      28   00:C01B  C9                  	ret
      29   00:C01C                      
      30   00:C01C                      bucle:
      31   00:C01C  18 FE               	jr bucle
      32   00:C01E                      
      33   00:C01E                      
      34   00:C01E                          
      35   00:C01E                          
      36   00:C01E                          
      37   00:C01E                         
      38   00:C01E                           
      39   00:C01E                       
      40   00:C01E                      FINAL:

    LABELS
-------------------------------------------------
00:00000000 X CHKRAM
00:00000008 X SYNCHR
00:00000010 X CHRGTR
00:00000018 X OUTDO
00:00000020 X DCOMPR
00:00000028 X GETYPR
00:00000030 X CALLF
00:00000038 X KEYINT
00:0000000C X RDSLT
00:00000014 X WRSLT
00:0000001C X CALSLT
00:00000024 X ENASLT
00:0000003B X INITIO
00:0000003E X INIFNK
00:00000041 X DISSCR
00:00000044 X ENASCR
00:00000047 X WRTVDP
00:0000004A X RDVRM
00:0000004D X WRTVRM
00:00000050 X SETRD
00:00000053 X SETWRT
00:00000056 X FILVRM
00:00000059 X LDIRMV
00:0000005C X LDIRVM
00:0000005F X CHGMOD
00:00000062 X CHGCLR
00:00000069 X CLRSPR
00:0000006C X INITXT
00:0000006F X INIT32
00:00000072 X INIGRP
00:00000075 X INIMLT
00:00000078 X SETTXT
00:0000007B X SETT32
00:0000007E X SETGRP
00:00000081 X SETMLT
00:00000084 X CALPAT
00:00000087 X CALATR
00:0000008A X GSPSIZ
00:0000008D X GRPPRT
00:00000090 X GICINI
00:00000093 X WRTPSG
00:00000096 X RDPSG
00:00000099 X STRTMS
00:0000009C X CHSNS
00:0000009F X CHGET
00:000000A2   CHPUT
00:000000A5 X LPTOUT
00:000000A8 X LPTSTT
00:000000AB X CNVCHR
00:000000AE X PINLIN
00:000000B1 X INLIN
00:000000B4 X QINLIN
00:000000B7 X BREAKX
00:000000BA X ISCNTC
00:000000BD X CKCNTC
00:000000C0 X BEEP
00:000000C3 X BCLS
00:000000C6 X POSIT
00:000000C9 X FNKSB
00:000000CC X ERAFNK
00:000000CF X DSPFNK
00:000000D2 X TOTEXT
00:000000D5 X GTSTCK
00:000000D8 X GTTRIG
00:000000DB X GTPAD
00:000000DE X GTPDL
00:000000E1 X TAPION
00:000000E4 X TAPIN
00:000000E7 X TAPIOF
00:000000EA X TAPOON
00:000000ED X TAPOUT
00:000000F0 X TAPOOF
00:000000F3 X STMOTR
00:000000F6 X LFTQ
00:000000F9 X PUTQ
00:000000FC X RIGHTC
00:000000FF X LEFTC
00:00000102 X UPC
00:00000105 X TUPC
00:00000108 X DOWNC
00:0000010B X TDOWNC
00:0000010E X SCALXY
00:00000111 X MAPXY
00:00000114 X FETCHC
00:00000117 X STOREC
00:0000011A X SETATR
00:0000011E X READC
00:00000120 X SETC
00:00000123 X NSETCX
00:00000126 X GTASPC
00:00000129 X PNTINI
00:0000012C X SCANR
00:0000012F X SCANL
00:00000165 X CHKNEW
00:0000016B X BIGFIL
00:0000016E X NSETRD
00:00000171 X NSTWRT
00:00000174 X NRDVRM
00:00000177 X NWRVRM
00:00000132 X CHGCAP
00:00000135 X CHGSND
00:00000138 X RSLREG
00:0000013B X WSLREG
00:0000013E X RDVDP
00:00000141 X SNSMAT
00:00000144 X PHYDIO
00:00000147 X FORMAT
00:0000014A X ISFLIO
00:0000014E X OUTDLP
00:00000150 X GETVCP
00:00000153 X GETVC2
00:00000156 X KILBUF
00:00000159 X CALBAS
00:0000C000   INICIO
00:0000C000   MAIN
00:0000C007   mensaje
00:0000C01C   bucle
00:0000C01E   FINAL


 Output: src/main.out
-------------------------------------------------

 Page: 00
  Org: 0000C000  Size: *  Used: 00000000

    No output

 Output: main.bin
-------------------------------------------------

 Page: 00
  Org: 0000C000  Size: *  Used: 00000025

   Address   Length Align   Label
   0000C000      37         INICIO
